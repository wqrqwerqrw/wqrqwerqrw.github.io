<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>树的直径</title>
    <link href="/2020/01/17/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    <url>/2020/01/17/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>树中所有最短路径距离的最大值即为树的直径</li></ul><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><ol><li>首先在树上任取一点<code>u</code>, 记录距离<code>u</code>最远的节点为<code>d1</code>, <code>d1</code>即为树直径的端点之一</li><li>寻找距离<code>d1</code>最远的节点<code>d2</code></li><li><code>d1</code>到<code>d2</code>的路径即为树的直径</li></ol><ul><li>可以使用两次<code>dfs</code>搜索答案</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">// vector G[v];</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in)</span></span>&#123;    vis[in] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e : G[in])&#123;        <span class="hljs-keyword">if</span>(!vis[in])&#123;            dis[e.v] = dis[in] + e.w;            <span class="hljs-keyword">if</span>(dis[e.v] &gt; maxdis)&#123;                maxdis = dis[e.v];                maxpoint = e.v;            &#125;        &#125;        dfs(e.v);    &#125;&#125;</code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li>利用树的直径可以在<code>O(n)</code>的求出每个结点的最远点</li><li>可以证明的是 : <ul><li>一个点的最远点一定在树的直径的端点上</li></ul></li><li>所以利用进行三次<code>dfs</code>即可求出树上最远点</li></ul><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in, <span class="hljs-keyword">int</span> mark)</span></span>&#123;    vis[in] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e : G[in])&#123;        <span class="hljs-keyword">if</span>(!vis[in])&#123;            dis[e.v][mark] = dis[in][mark] + e.w;            <span class="hljs-keyword">if</span>(dis[e.v] &gt; maxdis)&#123;                maxdis = dis[e.v][mark];                maxpoint = e.v;            &#125;        &#125;        dfs(e.v);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    dfs(root, <span class="hljs-number">0</span>); <span class="hljs-comment">//找第一个端点</span>    dfs(d1, <span class="hljs-number">0</span>); <span class="hljs-comment">// 找第二个端点的同时记录所有点与d1的距离</span>    dfs(d2, <span class="hljs-number">1</span>); <span class="hljs-comment">// 记录所有点与d2的距离</span>    <span class="hljs-comment">// max(dis[i][0], dis[i][1]) 即为所求</span>&#125;</code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><blockquote><p>世界上一共有n个国家，标号从1∼n。他们由n−1条边连接着，经过每条边都有一定的时间花费。任意两个国家之间两两可达。火山哥一共决定去K个国家。现在他想要知道:如果他从第i个国家出发，经过这K个国家的最短时间是多少？</p></blockquote><blockquote><p>第一行两个整数n,K，题意如题面所述。</p></blockquote><blockquote><p>接下来n−1行，每行三个整数u,v,w,表示存在一条从u到v长度为w的边。</p></blockquote><blockquote><p>接下来K行，每行一个整数，表示火山哥想去的某个国家，保证这K个国家两两不同。</p></blockquote><pre><code class="hljs cpp"><span class="hljs-comment">// Wqr_</span><span class="hljs-comment">// Time : 20/01/16</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&quot;\n&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ddd(...) <span class="hljs-meta-string">&quot; [&quot;</span> &lt;&lt; #__VA_ARGS__ <span class="hljs-meta-string">&quot;: &quot;</span> &lt;&lt; (__VA_ARGS__) &lt;&lt; <span class="hljs-meta-string">&quot;] &quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ttt cerr&lt;&lt;<span class="hljs-meta-string">&quot;test&quot;</span>&lt;&lt;endl</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">50</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span>    <span class="hljs-keyword">int</span> v, w;&#125;;<span class="hljs-built_in">vector</span>&lt;edge&gt; G[N];<span class="hljs-keyword">bool</span> ifk[N];<span class="hljs-keyword">int</span> f[N], fk[N], dis2k[N], disk2k[N][<span class="hljs-number">2</span>];<span class="hljs-keyword">int</span> n, k;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build_tree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in)</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e : G[in])&#123;        <span class="hljs-keyword">if</span>(e.v != f[in])&#123;            f[e.v] = in;            build_tree(e.v);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build_K_tree</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;        <span class="hljs-keyword">if</span>(ifk[i])&#123;            <span class="hljs-keyword">int</span> tmp = i;            <span class="hljs-keyword">while</span>(!ifk[f[tmp]] &amp;&amp; f[tmp])&#123;                tmp = f[tmp];                ifk[tmp] = <span class="hljs-number">1</span>;                k++;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">int</span> sizek;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getsizek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in)</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e : G[in])&#123;        <span class="hljs-keyword">if</span>(e.v != f[in] &amp;&amp; ifk[e.v])&#123;            sizek += e.w;            getsizek(e.v);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getdis2k</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in, <span class="hljs-keyword">int</span> lastk)</span></span>&#123;    <span class="hljs-keyword">if</span> (ifk[in]) dis2k[in] = <span class="hljs-number">0</span>, lastk = in;    fk[in] = lastk;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e : G[in])&#123;        <span class="hljs-keyword">if</span>(e.v != f[in])&#123;            dis2k[e.v] = dis2k[in] + e.w;            getdis2k(e.v, lastk);        &#125;    &#125;&#125;<span class="hljs-keyword">int</span> maxdisk2k, maxpoint, vis[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getdisk2k</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in, <span class="hljs-keyword">int</span> mark)</span></span>&#123;    vis[in] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e : G[in])&#123;        <span class="hljs-keyword">if</span>(!vis[e.v] &amp;&amp; ifk[e.v])&#123;            disk2k[e.v][mark] = disk2k[in][mark] + e.w;            <span class="hljs-keyword">if</span>(disk2k[e.v][mark] &gt; maxdisk2k)&#123;                maxdisk2k = disk2k[e.v][mark];                maxpoint = e.v;            &#125;            getdisk2k(e.v, mark);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-built_in">std</span>::ios::sync_with_stdio(<span class="hljs-literal">false</span>), <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>), <span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;    <span class="hljs-keyword">int</span> u, v, w;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;        G[u].push_back(&#123;v, w&#125;);        G[v].push_back(&#123;u, w&#125;);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; u;        ifk[u] = <span class="hljs-number">1</span>;    &#125;    build_tree(u);    build_K_tree();    getsizek(u);    getdis2k(u, u);    <span class="hljs-keyword">int</span> d1, d2;    maxdisk2k = maxpoint = <span class="hljs-number">0</span>;    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));    getdisk2k(u, <span class="hljs-number">0</span>);    d1 = maxpoint;    maxdisk2k = maxpoint = <span class="hljs-number">0</span>;    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;        disk2k[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;    &#125;    getdisk2k(d1, <span class="hljs-number">0</span>);    d2 = maxpoint;    maxdisk2k = maxpoint = <span class="hljs-number">0</span>;    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));    getdisk2k(d2, <span class="hljs-number">1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;        <span class="hljs-keyword">int</span> ans = dis2k[i] + sizek * <span class="hljs-number">2</span> - max(disk2k[fk[i]][<span class="hljs-number">0</span>], disk2k[fk[i]][<span class="hljs-number">1</span>]);        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[模板]-树链剖分</title>
    <link href="/2019/09/18/%E6%A8%A1%E6%9D%BF-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <url>/2019/09/18/%E6%A8%A1%E6%9D%BF-%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="本文存在大量修改空间-待更新"><a href="#本文存在大量修改空间-待更新" class="headerlink" title="本文存在大量修改空间, 待更新"></a><strong>本文存在大量修改空间, 待更新</strong></h1><h1 id="模板-树链剖分"><a href="#模板-树链剖分" class="headerlink" title="[模板]-树链剖分"></a>[模板]-树链剖分</h1><h2 id="必要前驱知识点"><a href="#必要前驱知识点" class="headerlink" title="必要前驱知识点"></a>必要前驱知识点</h2><ol><li>链式向前星</li><li>dfs序</li><li>线段树(区间)<h2 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h2></li></ol><ul><li><a href="https://www.cnblogs.com/chinhhh/p/7965433.html">link</a><h2 id="相关题目以及代码"><a href="#相关题目以及代码" class="headerlink" title="相关题目以及代码"></a>相关题目以及代码</h2></li><li><a href="https://www.luogu.org/problem/P3384">luogu-P3384</a></li></ul><pre><code class="hljs cpp"><span class="hljs-comment">// Author : Wqr_</span><span class="hljs-comment">// Time : 19/09/16</span><span class="hljs-comment">// luogu 3384</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nl (nc &lt;&lt; 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nr (nc &lt;&lt; 1 | 1)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> ll nmax = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">const</span> ll nmax2 = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;ll n, m, r, mod;ll w[nmax], wt[nmax];<span class="hljs-comment">/*******************向前星***************/</span>ll head[nmax], e = <span class="hljs-number">0</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span>    ll next, to;&#125; eg[nmax2];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ll u, ll v)</span> </span>&#123;    eg[e].to = v;    eg[e].next = head[u];    head[u] = e++;&#125;<span class="hljs-comment">/****************线段树****************/</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sgt</span> &#123;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span>        ll val, l, r, lz;        node() &#123; lz = val = <span class="hljs-number">0</span>;&#125;        <span class="hljs-function">ll <span class="hljs-title">len</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> r - l + <span class="hljs-number">1</span>; &#125;        <span class="hljs-function">ll <span class="hljs-title">mid</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> (l + r) / <span class="hljs-number">2</span>; &#125;    &#125; ns[nmax * <span class="hljs-number">4</span>];    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(ll nc)</span> </span>&#123;        ns[nc].val = (ns[nr].val + ns[nl].val) % mod;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(ll nc)</span> </span>&#123;        node &amp;lson = ns[nl];        node &amp;rson = ns[nr];        node &amp;cur = ns[nc];        lson.lz += cur.lz;        rson.lz += cur.lz;        lson.val += cur.lz * lson.len();        rson.val += cur.lz * rson.len();        lson.val %= mod;        rson.val %= mod;        cur.lz = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pr</span><span class="hljs-params">(ll nc)</span></span>&#123;        node &amp;cur = ns[nc];        <span class="hljs-keyword">if</span>(cur.l == cur.r)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; cur.val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">if</span>(cur.lz) pushdown(nc);        pr(nl);        pr(nr);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll nc, ll l, ll r)</span> </span>&#123;        node &amp;cur = ns[nc];        cur.l = l;        cur.r = r;        <span class="hljs-keyword">if</span> (l == r) &#123;            cur.val = wt[l] % mod;            <span class="hljs-keyword">return</span>;        &#125;        build(nl, l, cur.mid());        build(nr, cur.mid() + <span class="hljs-number">1</span>, r);        pushup(nc);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll nc, ll L, ll R, ll C)</span> </span>&#123;        node &amp;cur = ns[nc];        <span class="hljs-keyword">if</span> (L &lt;= cur.l &amp;&amp; cur.r &lt;= R) &#123;            cur.lz += C;            cur.val += C * cur.len();            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">if</span> (cur.lz) pushdown(nc);        <span class="hljs-keyword">if</span> (L &lt;= cur.mid()) update(nl, L, R, C);        <span class="hljs-keyword">if</span> (R &gt; cur.mid()) update(nr, L, R, C);        pushup(nc);    &#125;    <span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll nc, ll L, ll R)</span> </span>&#123;        node &amp;cur = ns[nc];        ll ret = <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span> (L &lt;= cur.l &amp;&amp; cur.r &lt;= R) &#123;            ret += cur.val;            ret %= mod;            <span class="hljs-keyword">return</span> ret;        &#125;        <span class="hljs-keyword">if</span> (cur.lz) pushdown(nc);        <span class="hljs-keyword">if</span> (L &lt;= cur.mid()) ret += query(nl, L, R);        <span class="hljs-keyword">if</span> (R &gt; cur.mid()) ret += query(nr, L, R);        ret %= mod;        <span class="hljs-keyword">return</span> ret;    &#125;&#125;;<span class="hljs-comment">/**************树链穮分**************/</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qtree</span> &#123;</span>    sgt tr;    ll idcnt;    qtree()&#123; idcnt = <span class="hljs-number">0</span>; &#125;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span>        ll deep, fa, id, top, son, siz;    &#125; ns[nmax];    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ll root)</span> </span>&#123;        dfs1(root, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);        dfs2(root, root);        tr.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(ll x, ll f, ll deep)</span> </span>&#123;        node &amp;cur = ns[x];        cur.deep = deep;        cur.fa = f;        cur.siz = <span class="hljs-number">1</span>;        ll maxson = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span> (ll i = head[x]; i != <span class="hljs-number">-1</span>; i = eg[i].next) &#123;            ll y = eg[i].to;            <span class="hljs-keyword">if</span> (y == f) <span class="hljs-keyword">continue</span>;            dfs1(y, x, deep + <span class="hljs-number">1</span>);            cur.siz += ns[y].siz;            <span class="hljs-keyword">if</span> (ns[y].siz &gt; maxson) &#123;                cur.son = y;                maxson = ns[y].siz;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(ll x, ll topf)</span> </span>&#123;        node &amp;cur = ns[x];        cur.id = ++idcnt;        wt[cur.id] = w[x];        cur.top = topf;        <span class="hljs-keyword">if</span> (!cur.son) <span class="hljs-keyword">return</span>;        dfs2(cur.son, topf);        <span class="hljs-keyword">for</span> (ll i = head[x]; i != <span class="hljs-number">-1</span>; i = eg[i].next) &#123;            ll y = eg[i].to;            <span class="hljs-keyword">if</span> (y == cur.fa || y == cur.son) <span class="hljs-keyword">continue</span>;            dfs2(y, y);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_by_way</span><span class="hljs-params">(ll x, ll y, ll C)</span> </span>&#123;        C %= mod;        <span class="hljs-keyword">while</span> (ns[x].top != ns[y].top) &#123;            <span class="hljs-keyword">if</span> (ns[ns[x].top].deep &lt; ns[ns[y].top].deep)                swap(x, y);            tr.update(<span class="hljs-number">1</span>, ns[ns[x].top].id, ns[x].id, C);            x = ns[ns[x].top].fa;        &#125;        <span class="hljs-keyword">if</span>(ns[x].deep &gt; ns[y].deep) swap(x, y);        tr.update(<span class="hljs-number">1</span>, ns[x].id, ns[y].id, C);    &#125;    <span class="hljs-function">ll <span class="hljs-title">que_by_way</span><span class="hljs-params">(ll x, ll y)</span> </span>&#123;        ll ans = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (ns[x].top != ns[y].top) &#123;            <span class="hljs-keyword">if</span> (ns[ns[x].top].deep &lt; ns[ns[y].top].deep)                swap(x, y);            ans += tr.query(<span class="hljs-number">1</span>, ns[ns[x].top].id, ns[x].id);            ans %= mod;            x = ns[ns[x].top].fa;        &#125;        <span class="hljs-keyword">if</span>(ns[x].deep &gt; ns[y].deep) swap(x, y);        ans += tr.query(<span class="hljs-number">1</span>, ns[x].id, ns[y].id);        ans %= mod;        <span class="hljs-keyword">return</span> ans;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_by_tree</span><span class="hljs-params">(ll x, ll C)</span> </span>&#123;        tr.update(<span class="hljs-number">1</span>, ns[x].id, ns[x].id + ns[x].siz - <span class="hljs-number">1</span>, C);    &#125;    <span class="hljs-function">ll <span class="hljs-title">que_by_tree</span><span class="hljs-params">(ll x)</span> </span>&#123;        <span class="hljs-keyword">return</span> tr.query(<span class="hljs-number">1</span>, ns[x].id, ns[x].id + ns[x].siz - <span class="hljs-number">1</span>) % mod;    &#125;&#125;qt;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    iofuck;<span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span>    freopen(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(head));    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; r &gt;&gt; mod;    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;        <span class="hljs-built_in">cin</span> &gt;&gt; w[i];    &#125;    ll u, v;    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;        add(u, v);        add(v, u);    &#125;    qt.init(r);    ll x, y, z;    ll com;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; com;        <span class="hljs-keyword">if</span> (com == <span class="hljs-number">1</span>) &#123;            <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;            qt.add_by_way(x, y, z);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (com == <span class="hljs-number">2</span>) &#123;            <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;            <span class="hljs-built_in">cout</span> &lt;&lt; qt.que_by_way(x, y) &lt;&lt; <span class="hljs-built_in">endl</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (com == <span class="hljs-number">3</span>) &#123;            <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;            qt.add_by_tree(x, y);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (com == <span class="hljs-number">4</span>) &#123;            <span class="hljs-built_in">cin</span> &gt;&gt; x;            <span class="hljs-built_in">cout</span> &lt;&lt; qt.que_by_tree(x) &lt;&lt; <span class="hljs-built_in">endl</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><ul><li><a href="https://www.luogu.org/problem/P2590">luogu-P2590</a></li></ul><pre><code class="hljs cpp"><span class="hljs-comment">// Author : Wqr_</span><span class="hljs-comment">// Time : 19/09/17</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nl (nc &lt;&lt; 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> nr (nc &lt;&lt; 1 | 1)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> nmax = <span class="hljs-number">3e5</span> + <span class="hljs-number">50</span>;<span class="hljs-keyword">int</span> n, q, head[nmax], e = <span class="hljs-number">0</span>, w[nmax], wt[nmax];<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span>    <span class="hljs-keyword">int</span> next, to;&#125;eg[nmax * <span class="hljs-number">2</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span></span>&#123;    eg[e].to = v;    eg[e].next = head[u];    head[u] = e++;&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sgt</span>&#123;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span>        <span class="hljs-keyword">int</span> vmax, vsum, l, r;        node()&#123;vmax = vsum = <span class="hljs-number">0</span>;&#125;        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">len</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> l - r + <span class="hljs-number">1</span>;&#125;        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mid</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> (l + r) / <span class="hljs-number">2</span>;&#125;    &#125;ns[nmax * <span class="hljs-number">4</span>];    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nc)</span></span>&#123;        ns[nc].vmax = max(ns[nl].vmax, ns[nr].vmax);        ns[nc].vsum = ns[nl].vsum + ns[nr].vsum;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nc)</span></span>&#123;        node &amp;cur = ns[nc];        <span class="hljs-keyword">if</span>(cur.l == cur.r)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; cur.vmax &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;            <span class="hljs-keyword">return</span> ;        &#125;        pr(nl);        pr(nr);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nc, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span>&#123;        node &amp;cur = ns[nc];        cur.l = l;        cur.r = r;        <span class="hljs-keyword">if</span>(l == r)&#123;            cur.vmax = cur.vsum = wt[l];            <span class="hljs-keyword">return</span> ;        &#125;        build(nl, l, cur.mid());        build(nr, cur.mid() + <span class="hljs-number">1</span>, r);        pushup(nc);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nc, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> C)</span></span>&#123;        node &amp;cur = ns[nc];        <span class="hljs-keyword">if</span>(cur.l == cur.r)&#123;            cur.vsum = cur.vmax = C;            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">if</span>(L &lt;= cur.mid()) update(nl, L, C);        <span class="hljs-keyword">if</span>(L &gt; cur.mid()) update(nr, L, C);        pushup(nc);    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nc, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123;        node &amp;cur = ns[nc];        <span class="hljs-keyword">int</span> ret = -INF;        <span class="hljs-keyword">if</span>(L &lt;= cur.l &amp;&amp; cur.r &lt;= R)&#123;            ret = max(ret, cur.vmax);            <span class="hljs-keyword">return</span> ret;        &#125;        <span class="hljs-keyword">if</span>(L &lt;= cur.mid()) ret = max(ret, query_max(nl, L, R));        <span class="hljs-keyword">if</span>(R &gt; cur.mid()) ret = max(ret, query_max(nr, L, R));        <span class="hljs-keyword">return</span> ret;    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nc, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123;        node &amp;cur = ns[nc];        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span>(L &lt;= cur.l &amp;&amp; cur.r &lt;= R)&#123;            ret += cur.vsum;            <span class="hljs-keyword">return</span> ret;        &#125;        <span class="hljs-keyword">if</span>(L &lt;= cur.mid()) ret += query_sum(nl, L, R);        <span class="hljs-keyword">if</span>(R &gt; cur.mid()) ret += query_sum(nr, L, R);        <span class="hljs-keyword">return</span> ret;    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qtree</span>&#123;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span>        <span class="hljs-keyword">int</span> deep, fa, id, top, son, siz;    &#125; ns[nmax];    sgt sss;    <span class="hljs-keyword">int</span> idcnt;    qtree() &#123;        idcnt = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;        dfs1(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);        dfs2(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);        sss.build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> deep)</span> </span>&#123;        node &amp;cur = ns[x];        cur.deep = deep;        cur.fa = f;        cur.siz = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> maxson = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[x]; i != <span class="hljs-number">-1</span>; i = eg[i].next) &#123;            <span class="hljs-keyword">int</span> y = eg[i].to;            <span class="hljs-keyword">if</span> (y == f) <span class="hljs-keyword">continue</span>;            dfs1(y, x, deep + <span class="hljs-number">1</span>);            cur.siz += ns[y].siz;            <span class="hljs-keyword">if</span> (ns[y].siz &gt; maxson) &#123;                cur.son = y;                maxson = ns[y].siz;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> topf)</span> </span>&#123;        node &amp;cur = ns[x];        cur.id = ++idcnt;        wt[cur.id] = w[x];        cur.top = topf;        <span class="hljs-keyword">if</span> (!cur.son) <span class="hljs-keyword">return</span>;        dfs2(cur.son, topf);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[x]; i != <span class="hljs-number">-1</span>; i = eg[i].next) &#123;            <span class="hljs-keyword">int</span> y = eg[i].to;            <span class="hljs-keyword">if</span> (y == cur.fa || y == cur.son) <span class="hljs-keyword">continue</span>;            dfs2(y, y);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nc, <span class="hljs-keyword">int</span> C)</span></span>&#123;        sss.update(<span class="hljs-number">1</span>, ns[nc].id, C);    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">quemax</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;        <span class="hljs-keyword">int</span> ans = -INF;        <span class="hljs-keyword">while</span> (ns[x].top != ns[y].top) &#123;            <span class="hljs-keyword">if</span> (ns[ns[x].top].deep &lt; ns[ns[y].top].deep)                swap(x, y);            ans = max(ans, sss.query_max(<span class="hljs-number">1</span>, ns[ns[x].top].id, ns[x].id));            x = ns[ns[x].top].fa;        &#125;        <span class="hljs-keyword">if</span>(ns[x].deep &gt; ns[y].deep) swap(x, y);        ans = max(ans, sss.query_max(<span class="hljs-number">1</span>, ns[x].id, ns[y].id));        <span class="hljs-keyword">return</span> ans;    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">quesum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span> (ns[x].top != ns[y].top) &#123;            <span class="hljs-keyword">if</span> (ns[ns[x].top].deep &lt; ns[ns[y].top].deep)                swap(x, y);            ans += sss.query_sum(<span class="hljs-number">1</span>, ns[ns[x].top].id, ns[x].id);            x = ns[ns[x].top].fa;        &#125;        <span class="hljs-keyword">if</span>(ns[x].deep &gt; ns[y].deep) swap(x, y);        ans += sss.query_sum(<span class="hljs-number">1</span>, ns[x].id, ns[y].id);        <span class="hljs-keyword">return</span> ans;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;        sss.pr(<span class="hljs-number">1</span>);        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;&#125;qt;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;<span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span>    freopen(<span class="hljs-string">&quot;in.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-built_in">stdin</span>);<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(head));    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> u, v;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;        add(u, v);        add(v, u);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; w[i];    &#125;    qt.init();    <span class="hljs-comment">//qt.test();</span>    <span class="hljs-built_in">cin</span> &gt;&gt; q;    <span class="hljs-built_in">string</span> ope;    <span class="hljs-keyword">int</span> x, y;    <span class="hljs-keyword">while</span>(q--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; ope &gt;&gt; x &gt;&gt; y;        <span class="hljs-keyword">if</span>(ope[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;H&#x27;</span>) qt.change(x, y);        <span class="hljs-keyword">if</span>(ope[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;M&#x27;</span>) <span class="hljs-built_in">cout</span> &lt;&lt; qt.quemax(x, y) &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">if</span>(ope[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;S&#x27;</span>) <span class="hljs-built_in">cout</span> &lt;&lt; qt.quesum(x, y) &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM VSCode Win 配置</title>
    <link href="/2019/09/11/acm-vscode%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/09/11/acm-vscode%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="ACM-VSCode-配置-备份"><a href="#ACM-VSCode-配置-备份" class="headerlink" title="ACM VSCode 配置(备份)"></a>ACM VSCode 配置(备份)</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://i.postimg.cc/JhXZ8pMP/TIM-20190911170343.png" alt="TIM-20190911170343.png"></p><h2 id="一-安装gcc并添加到PATH"><a href="#一-安装gcc并添加到PATH" class="headerlink" title="一 安装gcc并添加到PATH"></a>一 安装gcc并添加到PATH</h2><ul><li>略</li></ul><h2 id="二-配置"><a href="#二-配置" class="headerlink" title="二 配置"></a>二 配置</h2><ul><li><p>在储存代码的目录新建一个文件夹<code>.vscode</code>, 并新建三个文件</p><ul><li><p>c_cpp_properties.json</p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;configurations&quot;</span>: [  &#123;      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;MinGW64&quot;</span>,      <span class="hljs-attr">&quot;intelliSenseMode&quot;</span>: <span class="hljs-string">&quot;gcc-x64&quot;</span>,      <span class="hljs-attr">&quot;compilerPath&quot;</span>: <span class="hljs-string">&quot;C:/MinGw/bin/g++.exe&quot;</span>,      <span class="hljs-attr">&quot;includePath&quot;</span>: [          <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>      ],      <span class="hljs-attr">&quot;cppStandard&quot;</span>: <span class="hljs-string">&quot;c++14&quot;</span>  &#125;],<span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-number">4</span>&#125;</code></pre></li><li><p>launch.json</p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<span class="hljs-attr">&quot;configurations&quot;</span>: [  &#123;         <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;C++ Launch (GDB)&quot;</span>,      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,      <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,      <span class="hljs-attr">&quot;targetArchitecture&quot;</span>: <span class="hljs-string">&quot;x64&quot;</span>,      <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,      <span class="hljs-attr">&quot;args&quot;</span>: [ ],      <span class="hljs-attr">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,      <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;/&quot;</span>,      <span class="hljs-attr">&quot;externalConsole&quot;</span>: <span class="hljs-literal">true</span>,      <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span>: <span class="hljs-string">&quot;neverOpen&quot;</span>,      <span class="hljs-attr">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,      <span class="hljs-attr">&quot;miDebuggerPath&quot;</span>: <span class="hljs-string">&quot;C:/MinGw/bin/gdb.exe&quot;</span>,      <span class="hljs-attr">&quot;setupCommands&quot;</span>: [          &#123;              <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Enable pretty-printing for GDB&quot;</span>,              <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,              <span class="hljs-attr">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span>          &#125;      ],      <span class="hljs-attr">&quot;preLaunchTask&quot;</span>: <span class="hljs-string">&quot;Compile&quot;</span>   &#125;]&#125;</code></pre></li><li><p>tasks.json</p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>,<span class="hljs-attr">&quot;tasks&quot;</span>: [  &#123;      <span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;Compile&quot;</span>,      <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;g++&quot;</span>,      <span class="hljs-attr">&quot;args&quot;</span>: [          <span class="hljs-string">&quot;-g&quot;</span>,          <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,   <span class="hljs-comment">// 指定编译源代码文件</span>          <span class="hljs-string">&quot;-o&quot;</span>,          <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>, <span class="hljs-comment">// 指定输出文件名，不加该参数则默认输出a.exe</span>          <span class="hljs-comment">//&quot;-O2&quot;,      // 优化级别</span>          <span class="hljs-comment">//&quot;-ggdb3&quot;,   // 生成和调试有关的信息</span>          <span class="hljs-comment">//&quot;-Wall&quot;,    // 开启额外警告</span>          <span class="hljs-comment">//&quot;-static-libgcc&quot;,   // 静态链接</span>          <span class="hljs-comment">//&quot;-std=c++14&quot;,       // 使用c++17标准</span>          <span class="hljs-comment">//&quot;-finput-charset=UTF-8&quot;,    //输入编译器文本编码 默认为UTF-8</span>          <span class="hljs-comment">//&quot;-fexec-charset=GB18030&quot;,   //输出exe文件的编码</span>          <span class="hljs-comment">//&quot;-D _USE_MATH_DEFINES&quot;</span>      ],      <span class="hljs-attr">&quot;problemMatcher&quot;</span>: &#123;          <span class="hljs-attr">&quot;owner&quot;</span>: <span class="hljs-string">&quot;cpp&quot;</span>,          <span class="hljs-attr">&quot;fileLocation&quot;</span>: [              <span class="hljs-string">&quot;absolute&quot;</span>,          ],          <span class="hljs-attr">&quot;pattern&quot;</span>: &#123;              <span class="hljs-attr">&quot;regexp&quot;</span>: <span class="hljs-string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span>,              <span class="hljs-attr">&quot;file&quot;</span>: <span class="hljs-number">1</span>,              <span class="hljs-attr">&quot;line&quot;</span>: <span class="hljs-number">2</span>,              <span class="hljs-attr">&quot;column&quot;</span>: <span class="hljs-number">3</span>,              <span class="hljs-attr">&quot;severity&quot;</span>: <span class="hljs-number">4</span>,              <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-number">5</span>          &#125;      &#125;,      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,                  <span class="hljs-attr">&quot;group&quot;</span>: &#123;          <span class="hljs-attr">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,          <span class="hljs-attr">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span>      &#125;  &#125;]&#125;</code></pre></li></ul></li><li><p>以上主要用于需要断点调试的时候</p></li><li><p>快速编译可以安装coderunner插件</p><ol><li>安装coderunner</li><li>在<code>.vscode</code>新建<code>setting.json</code><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;code-runner.runInTerminal&quot;</span>: <span class="hljs-literal">true</span>,<span class="hljs-attr">&quot;code-runner.fileDirectoryAsCwd&quot;</span>: <span class="hljs-literal">true</span>,<span class="hljs-attr">&quot;code-runner.executorMap&quot;</span>: &#123; <span class="hljs-attr">&quot;c&quot;</span>: <span class="hljs-string">&quot;gcc $fileName -o build/$fileNameWithoutExt.exe &amp;&amp; .\\build\\$fileNameWithoutExt.exe&quot;</span>, <span class="hljs-attr">&quot;cpp&quot;</span>: <span class="hljs-string">&quot;g++ $fileName -o build/$fileNameWithoutExt.exe -Wall -O2 -static-libgcc -std=c++14 &amp;&amp; .\\build\\$fileNameWithoutExt.exe&quot;</span>&#125;,<span class="hljs-attr">&quot;code-runner.preserveFocus&quot;</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">&quot;code-runner.saveFileBeforeRun&quot;</span>: <span class="hljs-literal">true</span>&#125;</code></pre></li></ol></li></ul><h2 id="三-快速编辑"><a href="#三-快速编辑" class="headerlink" title="三 快速编辑"></a>三 快速编辑</h2><ul><li>在<code>文件</code>-&gt;<code>首选项</code>-&gt;<code>用户代码片段</code>-&gt;<code>cpp.json</code>中添加<pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;acminit&quot;</span> : &#123;      <span class="hljs-attr">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;acminit&quot;</span>,      <span class="hljs-attr">&quot;body&quot;</span>: [          <span class="hljs-string">&quot;// Author : Wqr_&quot;</span>,          <span class="hljs-string">&quot;// Time : $&#123;CURRENT_YEAR_SHORT&#125;/$&#123;CURRENT_MONTH&#125;/$&#123;CURRENT_DATE&#125;&quot;</span>,          <span class="hljs-string">&quot;#include&lt;bits/stdc++.h&gt;&quot;</span>,          <span class="hljs-string">&quot;#define iofuck std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)&quot;</span>,          <span class="hljs-string">&quot;#define INF 0x3f3f3f3f&quot;</span>,          <span class="hljs-string">&quot;using namespace std;&quot;</span>,          <span class="hljs-string">&quot;typedef long long ll;&quot;</span>,          <span class="hljs-string">&quot;int main()&#123;&quot;</span>,          <span class="hljs-string">&quot;    $0&quot;</span>,          <span class="hljs-string">&quot;&#125;&quot;</span>      ],      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;acminit&quot;</span>  &#125;,  <span class="hljs-attr">&quot;filein&quot;</span> : &#123;      <span class="hljs-attr">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;filein&quot;</span>,      <span class="hljs-attr">&quot;body&quot;</span>: [          <span class="hljs-string">&quot;#ifndef ONLINE_JUDGE&quot;</span>,          <span class="hljs-string">&quot;freopen(\&quot;in.txt\&quot;,\&quot;r\&quot;,stdin);&quot;</span>,          <span class="hljs-string">&quot;#endif&quot;</span>      ],      <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;filein&quot;</span>  &#125;&#125;</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>acm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.6.5 Educational-CF-Round-66-Div-2 解题报告</title>
    <link href="/2019/06/06/19-6-5-Educational-CF-Round-66-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/06/06/19-6-5-Educational-CF-Round-66-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="19-5-15-Educational-CF-Round-65-Div-2-2-7"><a href="#19-5-15-Educational-CF-Round-65-Div-2-2-7" class="headerlink" title="19.5.15 Educational CF Round 65 (Div. 2) (2 / 7)"></a>19.5.15 Educational CF Round 65 (Div. 2) (2 / 7)</h1><h2 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://codeforces.com/contest/1175">link</a></h2><h2 id="A-From-Hero-to-Zero"><a href="#A-From-Hero-to-Zero" class="headerlink" title="A. From Hero to Zero"></a>A. From Hero to Zero</h2><ul><li>用乘法代替循环以防止超时</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: a.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年06月05日 星期三 22时22分36秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;ll n, k;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">cin</span> &gt;&gt; t;    <span class="hljs-keyword">while</span>(t--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;        ll ans = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(;n &gt; <span class="hljs-number">0</span>;)&#123;            <span class="hljs-keyword">if</span>(n % k == <span class="hljs-number">0</span>)&#123;                n /= k;                ans++;            &#125;<span class="hljs-keyword">else</span>&#123;                ans += n % k;                n -= (n % k);            &#125;        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="B-Catch-Overflow"><a href="#B-Catch-Overflow" class="headerlink" title="B. Catch Overflow!"></a>B. Catch Overflow!</h2><ul><li>用两个栈保存for和add</li><li>具体见代码</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: b.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年06月05日 星期三 22时49分10秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;ll l;ll bian = <span class="hljs-number">4294967295</span>;ll ans = <span class="hljs-number">0</span>;ll tmp = <span class="hljs-number">0</span>;ll fornum = <span class="hljs-number">0</span>;<span class="hljs-built_in">stack</span>&lt;ll&gt; loop;<span class="hljs-built_in">stack</span>&lt;ll&gt; addd;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    <span class="hljs-built_in">cin</span> &gt;&gt; l;    <span class="hljs-built_in">string</span> in;    addd.push(<span class="hljs-number">0</span>);    <span class="hljs-keyword">while</span>(l--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; in;        <span class="hljs-keyword">if</span>(in[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;a&#x27;</span>)&#123;            addd.top()++;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;f&#x27;</span>)&#123;            addd.push(<span class="hljs-number">0</span>);            ll loopnum;            <span class="hljs-built_in">cin</span> &gt;&gt; loopnum;            loop.push(loopnum);            fornum++;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;e&#x27;</span>)&#123;            fornum--;            ll tmpp = addd.top() * loop.top();            <span class="hljs-keyword">if</span>(tmpp / loop.top() != addd.top() || tmpp &gt; bian)&#123;                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;OVERFLOW!!!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;            &#125;            loop.pop();            addd.pop();            addd.top() += tmpp;        &#125;    &#125;    <span class="hljs-keyword">if</span>(!addd.empty())&#123;        ans += addd.top();    &#125;    <span class="hljs-keyword">if</span>(ans &lt;= bian)        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;OVERFLOW!!!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.5.17 CF #563 (Div. 2) 解题报告</title>
    <link href="/2019/06/04/19-5-17-CF-563-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/06/04/19-5-17-CF-563-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="19-5-17-CF-563-Div-2-解题报告"><a href="#19-5-17-CF-563-Div-2-解题报告" class="headerlink" title="19.5.17 CF #563 (Div. 2) 解题报告"></a>19.5.17 CF #563 (Div. 2) 解题报告</h1><ul><li>这场<code>a</code> <code>b</code> <code>c</code>全有3k+的人做出来, 罚时有点多了, 难受.</li></ul><h2 id="linkhttp-codeforces-com-contest-1174"><a href="#linkhttp-codeforces-com-contest-1174" class="headerlink" title="linkhttp://codeforces.com/contest/1174"></a><a href="">link</a><a href="http://codeforces.com/contest/1174">http://codeforces.com/contest/1174</a></h2><h2 id="A-Ehab-Fails-to-Be-Thanos"><a href="#A-Ehab-Fails-to-Be-Thanos" class="headerlink" title="A. Ehab Fails to Be Thanos"></a>A. Ehab Fails to Be Thanos</h2><ul><li>排序后判断前后两半是否相等</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: a.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年06月03日 星期一 21时55分16秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> nmax = <span class="hljs-number">1000</span> + <span class="hljs-number">5</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">int</span> a[nmax * <span class="hljs-number">2</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];    &#125;    sort(a, a + <span class="hljs-number">2</span> * n);    ll sum1 = <span class="hljs-number">0</span>, sum2 = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        sum1 += a[i];    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &lt; <span class="hljs-number">2</span> * n; i++)&#123;        sum2 += a[i];    &#125;    <span class="hljs-keyword">if</span>(sum1 != sum2)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; i++)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="B-Ehab-Is-an-Odd-Person"><a href="#B-Ehab-Is-an-Odd-Person" class="headerlink" title="B. Ehab Is an Odd Person"></a>B. Ehab Is an Odd Person</h2><ul><li>如果同时有奇数后偶数就对整体排序后输出, 否则原样输出</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: b.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年06月03日 星期一 22时09分33秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; P;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> nmax = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">int</span> a[nmax];<span class="hljs-keyword">int</span> b[nmax];<span class="hljs-keyword">bool</span> book[nmax];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">bool</span> flag1 = <span class="hljs-number">0</span>;    <span class="hljs-keyword">bool</span> flag2 = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];        <span class="hljs-keyword">if</span>(a[i] % <span class="hljs-number">2</span>)  flag2 = <span class="hljs-number">1</span>;        <span class="hljs-keyword">else</span> flag1= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">if</span>(flag1 &amp;&amp; flag2)        sort(a, a + n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="C-Ehab-and-a-Special-Coloring-Problem"><a href="#C-Ehab-and-a-Special-Coloring-Problem" class="headerlink" title="C. Ehab and a Special Coloring Problem"></a>C. Ehab and a Special Coloring Problem</h2><ul><li>对每个素数和素数倍数赋值, 不是的附为1</li><li>具体见代码</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: c.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年06月03日 星期一 22时41分12秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> nmax = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<span class="hljs-keyword">bool</span> mark[nmax];<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; per;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prime</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; nmax; i++)&#123;        <span class="hljs-keyword">if</span>(mark[i]) <span class="hljs-keyword">continue</span>;        per.push_back(i);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j * i &lt; nmax; j++)&#123;            mark[j * i] = <span class="hljs-number">1</span>;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    prime();    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> ans[nmax];    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> tmp : per)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i * tmp &lt; nmax; i++)&#123;            ans[i * tmp] = flag;        &#125;        flag++;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.6.2 CF 2019 GR3 解题报告</title>
    <link href="/2019/06/02/19-6-2-CF-2019-GR3-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/06/02/19-6-2-CF-2019-GR3-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="19-6-2-CF-2019-GR3-解题报告-4-8"><a href="#19-6-2-CF-2019-GR3-解题报告-4-8" class="headerlink" title="19.6.2 CF 2019 GR3 解题报告 (4 / 8)"></a>19.6.2 CF 2019 GR3 解题报告 (4 / 8)</h1><h2 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://codeforces.com/contest/1148">link</a></h2><h2 id="A-Another-One-Bites-The-Dust"><a href="#A-Another-One-Bites-The-Dust" class="headerlink" title="A. Another One Bites The Dust"></a>A. Another One Bites The Dust</h2><ul><li>直接猜</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: a.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com </span><span class="hljs-comment">    &gt; Created Time: 2019年06月01日 星期六 22时33分07秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;ll a, b, c;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    ll ans = <span class="hljs-number">0</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;    ans += c * <span class="hljs-number">2</span>;    ll minn = min(a, b);    ll maxn = max(a, b);    <span class="hljs-keyword">if</span>(maxn &gt; minn)&#123;        ans += minn * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        ans += minn * <span class="hljs-number">2</span>;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="B-Born-This-Way"><a href="#B-Born-This-Way" class="headerlink" title="B. Born This Way"></a>B. Born This Way</h2><ul><li>二分 + 暴力 </li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: b.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年06月01日 星期六 22时44分32秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> nmax = <span class="hljs-number">2</span> * <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">28</span>;ll n, m, ta, tb, k;ll a[nmax], b[nmax];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; ta &gt;&gt; tb &gt;&gt; k;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; b[i];        <span class="hljs-comment">//timeb[i] = b[i] + tb;</span>    &#125;    <span class="hljs-keyword">if</span>(k &gt;= n)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    ll ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">0</span>; i &lt;= k; i++)&#123;        ll tmp = lower_bound(b, b + m, a[i] + ta) - b;        <span class="hljs-keyword">if</span>(tmp == m || k - i &gt;= (m - tmp)) &#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        ans = max(b[tmp + k - i] + tb, ans);    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="C-Crazy-Diamond"><a href="#C-Crazy-Diamond" class="headerlink" title="C. Crazy Diamond"></a>C. Crazy Diamond</h2><ul><li>刚开始用的选择排序, 果断t了</li><li>注意到数据只是<code>1~n</code>, 就是说直接通过当前位置找到要改变的位置</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: c_2.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com </span><span class="hljs-comment">    &gt; Created Time: 2019年06月02日 星期日 11时46分46秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; P;<span class="hljs-built_in">vector</span>&lt;P&gt; v;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> nmax = <span class="hljs-number">3e5</span> + <span class="hljs-number">5</span>;<span class="hljs-keyword">int</span> a[nmax], pos[nmax];<span class="hljs-keyword">int</span> n, ans = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;    v.push_back(P(i, j));    swap(pos[a[i]], pos[a[j]]);    swap(a[i], a[j]);    <span class="hljs-comment">/*</span><span class="hljs-comment">    for(int k = 1; k &lt;= n; k++)&#123;</span><span class="hljs-comment">        cout &lt;&lt; a[k] &lt;&lt; &quot; - &quot;;</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment">    */</span>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];        pos[a[i]] = i;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)&#123;        <span class="hljs-keyword">if</span>(a[i] == i) <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">int</span> p = pos[i];        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(p - i) &gt;= n / <span class="hljs-number">2</span>)&#123;            ans++;            swp(i, p);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span>(i &lt;= n / <span class="hljs-number">2</span> &amp;&amp; p &lt;= n / <span class="hljs-number">2</span>)&#123;                ans += <span class="hljs-number">2</span>;                swp(p, n);                swp(i, n);            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt;= n / <span class="hljs-number">2</span> &amp;&amp; p &gt; n / <span class="hljs-number">2</span>)&#123;                ans += <span class="hljs-number">3</span>;                swp(<span class="hljs-number">1</span>, p);                swp(<span class="hljs-number">1</span>, n);                swp(i, n);            &#125;<span class="hljs-keyword">else</span>&#123;                ans += <span class="hljs-number">2</span>;                swp(<span class="hljs-number">1</span>, p);                swp(<span class="hljs-number">1</span>, i);            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>] != <span class="hljs-number">1</span>) swp(<span class="hljs-number">1</span>, n), ans++;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> tmp : v)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; tmp.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; tmp.second &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="D-Dirty-Deeds-Done-Dirt-Cheap"><a href="#D-Dirty-Deeds-Done-Dirt-Cheap" class="headerlink" title="D. Dirty Deeds Done Dirt Cheap"></a>D. Dirty Deeds Done Dirt Cheap</h2><ul><li>注意到有两种对<code>a&gt;b</code>和<code>a&lt;b</code>, 输入时将两种对分别储存起来</li><li>对于<code>a&lt;b</code>的, 按a的降序进行排列, 对<code>a&gt;b</code>的, 按b的升序进行排列就能保证符合题目要求</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: d.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年06月02日 星期日 20时03分41秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false)</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; P;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> nmax = <span class="hljs-number">3e5</span> + <span class="hljs-number">5</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-built_in">vector</span>&lt;P&gt; a_b, b_a;<span class="hljs-built_in">map</span>&lt;P, <span class="hljs-keyword">int</span>&gt; mapp;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpa_b</span><span class="hljs-params">(P a, P b)</span></span>&#123;    <span class="hljs-keyword">return</span> a.second &lt; b.second;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmpb_a</span><span class="hljs-params">(P a, P b)</span></span>&#123;    <span class="hljs-keyword">return</span> a.first &gt; b.first;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    iofuck;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> a, b;    <span class="hljs-keyword">int</span> mark = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> marka_b = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> markb_a = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;        <span class="hljs-keyword">if</span>(a &gt; b)&#123;            a_b.push_back(P(a, b));            marka_b++;            mapp[P(a, b)] = ++mark;        &#125;<span class="hljs-keyword">else</span>&#123;            markb_a++;            b_a.push_back(P(a, b));            mapp[P(a, b)] = ++mark;        &#125;    &#125;    sort(a_b.begin(), a_b.end(), cmpa_b);    sort(b_a.begin(), b_a.end(), cmpb_a);    <span class="hljs-keyword">if</span>(marka_b &gt; markb_a)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; marka_b &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> tmp : a_b)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; mapp[tmp] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; markb_a &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> tmp : b_a)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; mapp[tmp] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;        &#125;    &#125;    <span class="hljs-comment">/*</span><span class="hljs-comment">    cout &lt;&lt; &quot;-----------&quot; &lt;&lt; endl;</span><span class="hljs-comment">    for(auto tmp : a_b)&#123;</span><span class="hljs-comment">        cout &lt;&lt; tmp.first &lt;&lt; &quot; &quot; &lt;&lt; tmp.second &lt;&lt; endl;</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment">    cout &lt;&lt; &quot;-----------&quot; &lt;&lt; endl;</span><span class="hljs-comment">    for(auto tmp : b_a)&#123;</span><span class="hljs-comment">        cout &lt;&lt; tmp.first &lt;&lt; &quot; &quot; &lt;&lt; tmp.second &lt;&lt; endl;</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.5.17 CF #562 (Div. 2) 解题报告</title>
    <link href="/2019/05/27/19-5-17-CF-562-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/05/27/19-5-17-CF-562-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="19-5-17-CF-562-Div-2-解题报告-2-5"><a href="#19-5-17-CF-562-Div-2-解题报告-2-5" class="headerlink" title="19.5.17 CF #562 (Div. 2) 解题报告 (2 / 5)"></a>19.5.17 CF #562 (Div. 2) 解题报告 (2 / 5)</h1><h2 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://codeforces.com/contest/1169">link</a></h2><h2 id="A-Circle-Metro"><a href="#A-Circle-Metro" class="headerlink" title="A. Circle Metro"></a>A. Circle Metro</h2><ul><li>直接模拟即可</li><li>ac代码  </li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: a.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年05月26日 星期日 23时06分30秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> n, a, x, b, y;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; x &gt;&gt; b &gt;&gt; y;    <span class="hljs-keyword">int</span> cura = a;    <span class="hljs-keyword">int</span> curb = b;    <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(;;)&#123;        <span class="hljs-keyword">if</span>(cura == curb)&#123;            flag = <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">if</span>(cura == x || curb == y) <span class="hljs-keyword">break</span>;        cura++;        <span class="hljs-keyword">if</span>(cura &gt; n) cura = <span class="hljs-number">1</span>;        curb--;        <span class="hljs-keyword">if</span>(curb &lt; <span class="hljs-number">1</span>) curb = n;    &#125;    <span class="hljs-keyword">if</span>(flag) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="B-Pairs"><a href="#B-Pairs" class="headerlink" title="B. Pairs"></a>B. Pairs</h2><ul><li>其实挺好写的, 可惜当时没想出来</li><li>记录第一个出现的两个数(记为<code>ta</code> <code>tb</code>), 然后记录和<code>ta</code> <code>tb</code>都不相同的<code>pair</code>的两个数(记为<code>tc</code> <code>td</code>). 然后暴力扫6遍即可</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: b_2.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com </span><span class="hljs-comment">    &gt; Created Time: 2019年05月27日 星期一 00时09分21秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; P;P ps[<span class="hljs-number">300030</span>];<span class="hljs-keyword">int</span> n, m;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">bool</span> tore = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;        <span class="hljs-keyword">if</span>(ps[i].first != a &amp;&amp; ps[i].first != b &amp;&amp; ps[i].second != a &amp;&amp; ps[i].second != b)&#123;            tore = <span class="hljs-number">0</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> tore;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">int</span> a, b;    <span class="hljs-keyword">int</span> ta, tb, tc = <span class="hljs-number">-1</span>, td = <span class="hljs-number">-1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);        ps[i].first = a;        ps[i].second = b;        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;            ta = a;            tb = b;        &#125;        <span class="hljs-keyword">if</span>(a != ta &amp;&amp; a != tb &amp;&amp; b != ta &amp;&amp; b != tb) &#123;            tc = a;            td = b;        &#125;    &#125;    <span class="hljs-keyword">bool</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-comment">//printf(&quot;%d-%d-%d-%d\n&quot;, ta, tb, tc, td);</span>    <span class="hljs-keyword">if</span>(check(ta, tc)) ans = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(check(ta, td)) ans = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(check(tb, tc)) ans = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(check(tb, td)) ans = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(check(ta, tb)) ans = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(check(tc, td)) ans = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(ans) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019 CCPC 吉林省赛以及东北四省赛小计</title>
    <link href="/2019/05/22/2019-CCPC-%E5%90%89%E6%9E%97%E7%9C%81%E8%B5%9B%E4%BB%A5%E5%8F%8A%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B%E5%B0%8F%E8%AE%A1/"/>
    <url>/2019/05/22/2019-CCPC-%E5%90%89%E6%9E%97%E7%9C%81%E8%B5%9B%E4%BB%A5%E5%8F%8A%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B%E5%B0%8F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="2019-CCPC-吉林省赛以及东北四省赛小计"><a href="#2019-CCPC-吉林省赛以及东北四省赛小计" class="headerlink" title="2019 CCPC 吉林省赛以及东北四省赛小计"></a>2019 CCPC 吉林省赛以及东北四省赛小计</h1><h2 id="队名-“玄学研究学会”"><a href="#队名-“玄学研究学会”" class="headerlink" title="队名 : “玄学研究学会”"></a>队名 : “玄学研究学会”</h2><h2 id="关于对举办方的吐槽"><a href="#关于对举办方的吐槽" class="headerlink" title="关于对举办方的吐槽"></a>关于对举办方的吐槽</h2><ul><li>中午午餐竟然是<code>一块巨大的面包</code> + <code>一根香肠</code> + <code>一瓶营养快线</code>. 虽然不错, 但是还是有点失落感;</li><li>记录账号密码的小条发的有点慢, 难受</li><li>键盘难受, 键位蜜汁不标准, 难受</li><li>没<code>vim</code>, 难受</li><li>厕所没坑, 难受</li><li>衣服丑, 竟然是荧光绿, 衣柜不能填新衣服了, 难受;</li><li>不过总体上还是不错的, 志愿者很棒</li></ul><h2 id="吉林省省赛-5-10"><a href="#吉林省省赛-5-10" class="headerlink" title="吉林省省赛 (5 / 10)"></a>吉林省省赛 (5 / 10)</h2><h3 id="比赛记录"><a href="#比赛记录" class="headerlink" title="比赛记录"></a>比赛记录</h3><ol><li>签到题<code>I题</code>挺快的写出来了(大概</li><li><code>G题</code>用向量很快的就可以解决, <code>ac</code></li><li>然后队友开了<code>E题</code>, t了三次, 交给我后写了下, <code>ac</code>了</li><li><code>J题</code>有一点要判断素数, 刚开始用一种很奇怪的方法判断素数wa了, 后来发现通过朴素的判断素数方法就能过, 队友成功<code>ac</code>掉</li><li>刚开是以为<code>A题</code>暴力的话事件负责度不够, 后来发现就算退化到最退化的情况也只有<code>1e6</code>的复杂度, 写了下, <code>ac</code></li></ol><h3 id="比赛总结"><a href="#比赛总结" class="headerlink" title="比赛总结"></a>比赛总结</h3><ol><li>拿了个<strong>铜奖</strong>, 作为第一次打比赛, 也是挺爽的了</li><li><code>F题</code> 真的是非常可惜, 打完比赛后向对面学长请教了一下就知道怎么做了 ,实现非常简单, 可惜没能想到, 不然就能 6 题了</li><li>对于一些细节的把控还是不是很到位, 不熟悉竞赛的节奏</li><li>对题目的理解不够深入, 再很浅显的时候就做, 下次要理解透彻题目的时候再做(输入除外)</li><li>思维还是很重要的, 总之还是要多做题, 多<strong>codeforces</strong></li></ol><ul><li></li></ul><h2 id="四省东北赛-2-10-泪"><a href="#四省东北赛-2-10-泪" class="headerlink" title="四省东北赛 (2 / 10 (泪))"></a>四省东北赛 (2 / 10 (泪))</h2><h3 id="比赛记录-1"><a href="#比赛记录-1" class="headerlink" title="比赛记录"></a>比赛记录</h3><ol><li>队友把签到题丢给我, 撸完码后犹豫了好久, 导致排名低了不少, 果然<strong>犹豫就会败北</strong></li><li>之后队友开了<code>C题</code>, 虽然有些波折, 但是成功 1 发<code>ac</code>, 队友真强啊</li><li>之后开了<code>B题</code>, 题意看的异常混乱, 到最后也没能知道题目表达的到底是个什么意思…</li><li><code>G题</code>我在刚开始想了下并且试着写了一下, 发现想法完全是错的后交给了队友, 在最后想出了一个接近正确答案的解法, 但是很可惜, 与正确答案还是有些差距, 没能实现成功</li></ol><h3 id="比赛总结-1"><a href="#比赛总结-1" class="headerlink" title="比赛总结"></a>比赛总结</h3><ol><li>热身赛时候发现对面竟然的哈工大一队, 压力有点大…</li><li>拿了个<strong>银奖</strong><del>(最后一名)</del>, 因为封榜前在银牌线上方不是很多, 所以读榜的时候真的是非常刺激, 读完铜奖名单后发现没有我们队, 我们都激动地不行.  但是下一次比赛最好不是这种碰运气的情况了</li><li>比赛过程中还是略微有些浮躁, 另外不够果断, 这之后要改</li></ol><ul><li></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ccpc</tag>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.5.17 CF #561 (Div. 2) 解题报告</title>
    <link href="/2019/05/18/19-5-17-CF-561-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/05/18/19-5-17-CF-561-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="19-5-17-CF-561-Div-2-解题报告-3-6"><a href="#19-5-17-CF-561-Div-2-解题报告-3-6" class="headerlink" title="19.5.17 CF #561 (Div. 2) 解题报告(3 / 6)"></a>19.5.17 CF #561 (Div. 2) 解题报告(3 / 6)</h1><h2 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://codeforces.com/contest/1166">link</a></h2><h2 id="A-Silent-Classroom"><a href="#A-Silent-Classroom" class="headerlink" title="A. Silent Classroom"></a>A. Silent Classroom</h2><ul><li>统计每个首字母出现的次数,设为<code>n</code>, 然后累加C(n, 2)</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: a.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com </span><span class="hljs-comment">    &gt; Created Time: 2019年05月17日 星期五 22时54分30秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">200200</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">int</span> nums[<span class="hljs-number">300</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in)</span></span>&#123;    <span class="hljs-keyword">return</span> (in * (in - <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-built_in">string</span> in;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; in;        nums[(<span class="hljs-keyword">int</span>)in[<span class="hljs-number">0</span>]]++;    &#125;    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++)&#123;        <span class="hljs-keyword">int</span> tmp = nums[i] / <span class="hljs-number">2</span>;        ans += s(tmp);        ans += s(nums[i] - tmp);    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="B-All-the-Vowels-Please"><a href="#B-All-the-Vowels-Please" class="headerlink" title="B. All the Vowels Please"></a>B. All the Vowels Please</h2><ul><li>模拟输出即可</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: b.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年05月17日 星期五 23时20分52秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> k;<span class="hljs-keyword">char</span> cs[<span class="hljs-number">5</span>] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>&#125;;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; k;    <span class="hljs-keyword">if</span>(k &lt; <span class="hljs-number">25</span>)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> book = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>; i &lt;= <span class="hljs-built_in">sqrt</span>(k); i++)&#123;        <span class="hljs-keyword">if</span>(k % i == <span class="hljs-number">0</span>)&#123;            flag = <span class="hljs-number">1</span>;            book = i;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">if</span>(!flag)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">int</span> x = book;    <span class="hljs-keyword">int</span> y = k / book;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; y; j++)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; cs[(i + j) % <span class="hljs-number">5</span>];        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="C-A-Tale-of-Two-Lands"><a href="#C-A-Tale-of-Two-Lands" class="headerlink" title="C. A Tale of Two Lands"></a>C. A Tale of Two Lands</h2><ul><li>首先注意到两个数相比较, 如果第二个数使得判断条件为假, 则第一个数比第二个数大的数相比较肯定为假, 所以具有单调性, 可以用二分解决, 朴素算法会t(t了(泣))</li><li>这题要注意数据范围为阶乘级, 所以要用<code>long long</code>类型输出答案(因为这个wa了(泣))</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: c.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年05月17日 星期五 23时47分45秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">int</span> a[<span class="hljs-number">200200</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">int</span> t1 = <span class="hljs-built_in">abs</span>(a - b);    <span class="hljs-keyword">int</span> t2 = <span class="hljs-built_in">abs</span>(a + b);    <span class="hljs-keyword">if</span>(min(t1, t2) &lt;= min(a, b) &amp;&amp; max(t1, t2) &gt;= max(a, b))&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in)</span></span>&#123;    <span class="hljs-keyword">int</span> lb = in, ub = n;    <span class="hljs-keyword">int</span> mid;    <span class="hljs-keyword">int</span> ans;    <span class="hljs-keyword">while</span>(ub &gt;= lb)&#123;        mid = (lb + ub) &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(p(a[in], a[mid])) ans = mid, lb = mid + <span class="hljs-number">1</span>;        <span class="hljs-keyword">else</span> ub = mid - <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> ans - in;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> in;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;in);        a[i] = <span class="hljs-built_in">abs</span>(in);    &#125;    sort(a, a + n);    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        ans += c(i);    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.5.15 Educational CF Round 65 (Div. 2) 解题报告</title>
    <link href="/2019/05/16/19-5-15-Educational-CF-Round-65-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/05/16/19-5-15-Educational-CF-Round-65-Div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="19-5-15-Educational-CF-Round-65-Div-2-4-7"><a href="#19-5-15-Educational-CF-Round-65-Div-2-4-7" class="headerlink" title="19.5.15 Educational CF Round 65 (Div. 2) (4 / 7)"></a>19.5.15 Educational CF Round 65 (Div. 2) (4 / 7)</h1><h2 id="link"><a href="#link" class="headerlink" title="link"></a><a href="http://codeforces.com/contest/1167">link</a></h2><h2 id="A-Telephone-Number"><a href="#A-Telephone-Number" class="headerlink" title="A. Telephone Number"></a>A. Telephone Number</h2><ul><li>判断下8出现的第一个位置然后剪一下再判断就行了</li><li><code>11</code>打成<code>8</code>wa了一发..</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: a.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com </span><span class="hljs-comment">    &gt; Created Time: 2019年05月15日 星期三 22时28分36秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 200100</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">bool</span> book[<span class="hljs-number">15</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">cin</span> &gt;&gt; t;    <span class="hljs-keyword">while</span>(t--)&#123;        <span class="hljs-keyword">int</span> n;        <span class="hljs-built_in">cin</span> &gt;&gt; n;        <span class="hljs-built_in">string</span> in;        <span class="hljs-built_in">cin</span> &gt;&gt; in;        <span class="hljs-built_in">memset</span>(book, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(book));        <span class="hljs-keyword">int</span> min8 = <span class="hljs-number">0x3f3f3f3f</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;            book[in[i] - <span class="hljs-string">&#x27;0&#x27;</span>] = <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(in[i] == <span class="hljs-string">&#x27;8&#x27;</span>)&#123;                min8 = min(min8, i);            &#125;        &#125;        <span class="hljs-keyword">if</span>(!book[<span class="hljs-number">8</span>]) &#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">continue</span>;        &#125;        <span class="hljs-keyword">if</span>(n - min8 &gt;= <span class="hljs-number">11</span>)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="B-Lost-Numbers"><a href="#B-Lost-Numbers" class="headerlink" title="B. Lost Numbers"></a>B. Lost Numbers</h2><ul><li>第一次做交互体题, 懵逼. 不过看了下别人的代码马上理解是个什么东西了</li><li>题意 : <ul><li>总共有６个数, 每一个可能为<code>4 8 15 16 23 42</code>中的一个, 并且每个数出现仅一次. 四次询问, 每次输出形如<code>? a b</code>, 系统会返回第a个数与第b个数的乘积</li><li>按顺序输出这6个数</li></ul></li><li>知道了意思就很好做了, 设这 6 个数为ans[6], 问<code>ans[0] * ans[1]</code>, <code>ans[1] * ans[2]</code>, <code>ans[2] * ans[3]</code>, <code>ans[3] * ans[4]</code>. 然后就可以判断出所有的数了. </li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: b.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com </span><span class="hljs-comment">    &gt; Created Time: 2019年05月16日 星期四 10时18分14秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> sum12, sum23, sum34, sum45;<span class="hljs-keyword">int</span> ans[<span class="hljs-number">6</span>];<span class="hljs-keyword">int</span> nums[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">42</span>&#125;;<span class="hljs-keyword">int</span> book[<span class="hljs-number">6</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;? 1 2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; sum12;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;? 2 3&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; sum23;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;? 3 4&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; sum34;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;? 4 5&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; sum45;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)&#123;        <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; j++)&#123;            <span class="hljs-keyword">if</span>(nums[i] * nums[j] == sum12)&#123;                flag = <span class="hljs-number">1</span>;                book[i]++;                book[j]++;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)&#123;        <span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; j++)&#123;            <span class="hljs-keyword">if</span>(nums[i] * nums[j] == sum23)&#123;                flag = <span class="hljs-number">1</span>;                book[i]++;                book[j]++;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)&#123;        <span class="hljs-keyword">if</span>(book[i] == <span class="hljs-number">2</span>)&#123;            ans[<span class="hljs-number">1</span>] = nums[i];        &#125;    &#125;    ans[<span class="hljs-number">0</span>] = sum12 / ans[<span class="hljs-number">1</span>];    ans[<span class="hljs-number">2</span>] = sum23 / ans[<span class="hljs-number">1</span>];    ans[<span class="hljs-number">3</span>] = sum34 / ans[<span class="hljs-number">2</span>];    ans[<span class="hljs-number">4</span>] = sum45 / ans[<span class="hljs-number">3</span>];    ans[<span class="hljs-number">5</span>] = <span class="hljs-number">4</span> + <span class="hljs-number">8</span> + <span class="hljs-number">15</span> + <span class="hljs-number">16</span> + <span class="hljs-number">23</span> + <span class="hljs-number">42</span> - ans[<span class="hljs-number">0</span>] - ans[<span class="hljs-number">1</span>] - ans[<span class="hljs-number">2</span>] - ans[<span class="hljs-number">3</span>] - ans[<span class="hljs-number">4</span>];    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;! &quot;</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; ans[i] &lt;&lt;  <span class="hljs-string">&quot; &quot;</span>;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="C-News-Distribution"><a href="#C-News-Distribution" class="headerlink" title="C. News Distribution"></a>C. News Distribution</h2><ul><li>很明显的并查集, 但是重点是时间复杂度的优化, 刚开始朴素写法超时了几次, 后来再<code>unite</code></li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: c.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年05月15日 星期三 22时56分29秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 500500</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> n, m;<span class="hljs-keyword">int</span> par[MAXN];<span class="hljs-keyword">int</span> hi[MAXN];<span class="hljs-keyword">int</span> num[MAXN];<span class="hljs-comment">//储存集合元素的个数</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        num[i] = <span class="hljs-number">1</span>;        par[i] = i;        hi[i] = <span class="hljs-number">0</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">if</span>(par[x] == x)&#123;        <span class="hljs-keyword">return</span> x;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">return</span> par[x] = find(par[x]);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unite</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;    x = find(x);    y = find(y);    <span class="hljs-keyword">if</span>(x == y) <span class="hljs-keyword">return</span> ;    <span class="hljs-keyword">if</span>(hi[x] &lt; hi[y])&#123;        par[x] = y;        num[y] += num[x];<span class="hljs-comment">//合并</span>    &#125;<span class="hljs-keyword">else</span>&#123;        par[y] = x;        <span class="hljs-keyword">if</span>(hi[x] == hi[y]) hi[x]++;        num[x] += num[y];<span class="hljs-comment">//合并</span>    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;    <span class="hljs-keyword">return</span> find(x) == find(y);&#125;<span class="hljs-keyword">int</span> book[<span class="hljs-number">500500</span>];<span class="hljs-keyword">bool</span> mark[<span class="hljs-number">500500</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    init(n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;        <span class="hljs-keyword">int</span> ge;        <span class="hljs-keyword">int</span> in[MAXN];        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ge);        <span class="hljs-keyword">int</span> last, now;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; ge; j++)&#123;            <span class="hljs-comment">//if(j) last = now;</span>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, in + j);            <span class="hljs-comment">/*</span><span class="hljs-comment">            if(j)&#123;</span><span class="hljs-comment">                if(mark[last - 1] &amp;&amp; mark[now - 1]) continue;</span><span class="hljs-comment">                unite(last - 1, now - 1);</span><span class="hljs-comment">                mark[last - 1] = 1;</span><span class="hljs-comment">                mark[now - 1] = 1;</span><span class="hljs-comment">            &#125;</span><span class="hljs-comment">            */</span>        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; ge - <span class="hljs-number">1</span>; j++)&#123;            <span class="hljs-keyword">int</span> a = in[j] - <span class="hljs-number">1</span>;            <span class="hljs-keyword">int</span> b = in[j + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;            unite(a, b);        &#125;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-keyword">int</span> x = find(i);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[x]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="D-Bicolored-RBS"><a href="#D-Bicolored-RBS" class="headerlink" title="D. Bicolored RBS"></a>D. Bicolored RBS</h2><ul><li>思维题, 想出来就很好写了</li><li>刚开始用的dfs, 然后超时了几发, 后来经<strong>dalao</strong>指点, 发现可以遍历一次就出答案</li><li>思路 : 从<code>string[1]</code>开始遍历, 如果与上一个字符相同就换颜色涂, 不同就不换颜色涂</li><li>ac代码</li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: d2.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: 2019年05月16日 星期四 09时57分33秒</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 200100</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">int</span> n;<span class="hljs-built_in">string</span> in;<span class="hljs-keyword">bool</span> ans[MAXN];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; in;    <span class="hljs-keyword">bool</span> cr = <span class="hljs-number">0</span>;    ans[<span class="hljs-number">0</span>] = cr;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;        <span class="hljs-keyword">if</span>(in[i] == in[i - <span class="hljs-number">1</span>]) cr = !cr;        ans[i] = cr;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; ans[i];    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排列组合以及相关STL总结</title>
    <link href="/2019/05/10/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3STL%E6%80%BB%E7%BB%93/"/>
    <url>/2019/05/10/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3STL%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>#排列组合以及相关STL总结</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li>相关文档<ul><li><a href="https://zh.cppreference.com/w/cpp/algorithm/next_permutation">next_permutation</a></li><li><a href="https://zh.cppreference.com/w/cpp/algorithm/prev_permutation">prev_permutation</a></li></ul></li><li>相关博客<ul><li><a href="https://www.cnblogs.com/mfmdaoyou/p/7387577.html">ACM~排列组合&amp;&amp;hdu例子</a></li><li><a href="https://blog.csdn.net/u010480899/article/details/52346652">ACM学习历程21——各种排列组合问题</a></li></ul></li></ul><h2 id="有关组合数学的公式"><a href="#有关组合数学的公式" class="headerlink" title="有关组合数学的公式"></a>有关组合数学的公式</h2><ol><li>排列公式<code>P(n,r)=n!/r!</code></li><li>组合公式<code>C(n,r)=n!/(r!*(n-r)!)</code><br> <code>C(n,r)=C(n-1,r)+C(n-1,r-1)</code></li><li>错排公式    <pre><code class="hljs angelscript">d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>,d[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>d[n]=(n<span class="hljs-number">-1</span>)*(d[n<span class="hljs-number">-1</span>]+d[n<span class="hljs-number">-2</span>])</code></pre></li><li>卡特兰数  <ul><li>前几项 : 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786,208012…</li><li>公式<code>C(n)=C(2n,n)/(n+1)</code></li></ul></li></ol><h2 id="STL中的全排列函数"><a href="#STL中的全排列函数" class="headerlink" title="STL中的全排列函数"></a>STL中的全排列函数</h2><ul><li>函数声明 : <code>#include&lt;algorithm&gt;</code><blockquote><p>bool next_permutation( iterator start, iterator end);</p></blockquote></li><li><code>next_permutation()</code>函数功能是输出全部比当前排列大的排列。顺序是从小到大</li><li><code>prev_permutation()</code>函数功能是输出全部比当前排列小的排列，顺序是从大到小</li><li>复杂度<ul><li>至多 N/2 次交换，其中 N = <code>std::distance(first, last)</code></li><li>典型实现在排列的整个序列上，平均每次调用使用约 3 次比较和 1.5 次交换</li></ul></li><li>例题 : <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1027">hdu-1027</a></li><li>用<code>next_permutation()</code>就可以简单的解决<br>&lt;!–hexoPostRenderEscape:<pre><code class="hljs cpp"><span class="hljs-comment">/*<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></span><br><span class="hljs-comment">    &gt; File Name: p.cpp</span><br><span class="hljs-comment">    &gt; Author: Wqr_</span><br><span class="hljs-comment">    &gt; Mail: <a href="mailto:&#x78;&#117;&#101;&#100;&#x75;&#97;&#110;&#119;&#x65;&#x69;&#x40;&#x31;&#x32;&#x36;&#46;&#x63;&#x6f;&#109;">&#x78;&#117;&#101;&#100;&#x75;&#97;&#110;&#119;&#x65;&#x69;&#x40;&#x31;&#x32;&#x36;&#46;&#x63;&#x6f;&#109;</a> </span><br><span class="hljs-comment">    &gt; Created Time: 2019年05月10日 星期五 10时23分37秒</span><br><span class="hljs-comment"> <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</span></li></ul><p><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">int</span> num[<span class="hljs-number">1010</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            num[i] = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        m–;<br>        <span class="hljs-keyword">while</span>(m–)&#123;<br>            next_permutation(num, num + n);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num[i]);<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;</code></pre>:hexoPostRenderEscape–&gt;</p>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>排列组合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL-map 总结</title>
    <link href="/2019/05/08/STL-map-%E6%80%BB%E7%BB%93/"/>
    <url>/2019/05/08/STL-map-%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="STL-map-总结"><a href="#STL-map-总结" class="headerlink" title="STL-map 总结"></a>STL-map 总结</h1><h2 id="文档链接"><a href="#文档链接" class="headerlink" title="文档链接"></a><a href="https://zh.cppreference.com/w/cpp/container/map">文档链接</a></h2><h2 id="map基本操作"><a href="#map基本操作" class="headerlink" title="map基本操作"></a>map基本操作</h2><ul><li>在STL的头文件中<code>&lt;map&gt;</code>中定义了模版类map和multimap，用有序二叉树表存储类型为<code>pair&lt;const Key, T&gt;</code>的元素对序列. 序列中的元素以 const Key 部分作为标识, map 中所有元素的Key值必须是唯一的，multimap 则允许有重复的 Key 值.</li><li>可以将map看作是由Key标识元素的元素集合，这类容器也被称为“关联容器”，可以通过一个Key值来快速决定一个元素，因此非常适合于需要按照Key值查找元素的容器. </li><li>map模版类需要四个模版参数，第一个是键值类型，第二个是元素类型，第三个是比较算子，第四个是分配器类型。其中键值类型和元素类型是必要的.</li><li>定义map对象的代码示例：<pre><code class="hljs cpp"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; m;</code></pre></li><li>基本操作<br>&lt;!–hexoPostRenderEscape:<pre><code class="hljs cpp"><span class="hljs-comment">/*  向map中插入元素  */</span><br><span class="hljs-comment">// [key]操作是map很有特色的操作,如果在map中存在键值为key的元素对, 则返回该元素对的值域部分,否则将会创建一个键值为key的元素对,值域为默认值。所以可以用该操作向map中插入元素对或修改已经存在的元素对的值域部分.</span><br>m[key] = value;<br>m.insert(<span class="hljs-built_in">make_pair</span>(key, value));    <span class="hljs-comment">//  也可以直接调用insert方法插入元素对,insert操作会返回一个pair,当map中没有与key相匹配的键值时,其first是指向插入元素对的迭代器,其second为true;若map中已经存在与key相等的键值时,其first是指向该元素对的迭代器,second为false。</span></li></ul><p><span class="hljs-comment">/*  查找元素  */</span><br><span class="hljs-comment">// 要注意的是,当与该键值相匹配的元素对不存在时,会创建键值为key（当另一个元素是整形时，m[key]=0）的元素对.</span><br><span class="hljs-keyword">int</span> i = m[key];<br><span class="hljs-comment">// 如果map中存在与key相匹配的键值时,find操作将返回指向该元素对的迭代器,否则,返回的迭代器等于map的end()(参见vector中提到的begin()和end()操作).</span><br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = m.find(key);   </p><p><span class="hljs-comment">/*  删除元素  */</span><br><span class="hljs-comment">// 删除与指定key键值相匹配的元素对,并返回被删除的元素的个数.</span><br>m.erase(key);<br><span class="hljs-comment">//  删除由迭代器it所指定的元素对,并返回指向下一个元素对的迭代器.</span><br>m.erase(it);    </p><p><span class="hljs-comment">/*  其他操作  */</span><br>m.size();       <span class="hljs-comment">//  返回元素个数</span><br>m.empty();      <span class="hljs-comment">//  判断是否为空</span><br>m.clear();      <span class="hljs-comment">//  清空所有元素</span></code></pre>:hexoPostRenderEscape–&gt;</p><h2 id="map的排序"><a href="#map的排序" class="headerlink" title="map的排序"></a>map的排序</h2><ul><li><p>为了实现快速查找, map内部本身就是按序存储的(比如红黑树). 在我们插入<code>&lt;key, value&gt;</code>键值对时, 就会按照key的大小顺序进行存储, 这也是作为key的类型必须能够进行&lt;运算比较的原因. 但有些时候需要用特殊的规则进行排序, 这时可以用<code>vector</code>进行间接地排序</p></li><li><p>map中通过<code>pair</code>储存数据, 所以定义</p><pre><code class="hljs cpp"><span class="hljs-built_in">map</span>&lt;key, value&gt; m;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;key, value&gt; pa;<span class="hljs-comment">//把m中的值复制到vec中</span><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;pa&gt; <span class="hljs-title">vec</span><span class="hljs-params">(m.begin(), m.end())</span></span>;</code></pre></li><li><p>之后定义排序函数通过<code>vector</code>排序</p></li><li><p>例题<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1236">hdu-1236</a><br>&lt;!–hexoPostRenderEscape:<pre><code class="hljs cpp"><span class="hljs-comment">/*<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></span><br><span class="hljs-comment">    &gt; File Name: c.cpp</span><br><span class="hljs-comment">    &gt; Author: Wqr_</span><br><span class="hljs-comment">    &gt; Mail: <a href="mailto:&#120;&#x75;&#x65;&#x64;&#117;&#x61;&#110;&#x77;&#x65;&#x69;&#x40;&#49;&#x32;&#x36;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#x75;&#x65;&#x64;&#117;&#x61;&#110;&#x77;&#x65;&#x69;&#x40;&#49;&#x32;&#x36;&#x2e;&#x63;&#x6f;&#x6d;</a> </span><br><span class="hljs-comment">    &gt; Created Time: 2019年05月06日 星期一 19时40分20秒</span><br><span class="hljs-comment"> <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</span></p></li></ul><p><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; pa;<br><span class="hljs-keyword">int</span> fen[<span class="hljs-number">20</span>];<br><span class="hljs-comment">//定义比较函数</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> pa &amp;a, <span class="hljs-keyword">const</span> pa &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.second != b.second)<br>        <span class="hljs-keyword">return</span> a.second &gt; b.second;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> a.first.compare(b.first) &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m, g;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;g);<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; jifen;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, fen + i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-built_in">string</span> hao;<br>            <span class="hljs-keyword">int</span> num;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; hao &gt;&gt; num;<br>            jifen[hao] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; num; j++)&#123;<br>                <span class="hljs-keyword">int</span> in;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;in);<br>                jifen[hao] += fen[in];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(jifen[hao] &gt;= g)&#123;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;pa&gt; <span class="hljs-title">vec</span><span class="hljs-params">(jifen.begin(), jifen.end())</span></span>;<br>        <span class="hljs-comment">// 排序</span><br>        sort(vec.begin(), vec.end(), cmp);<br>        <span class="hljs-keyword">for</span>(pa vecc : vec)&#123;<br>            <span class="hljs-keyword">if</span>(vecc.second &gt;= g)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; vecc.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; vecc.second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;</code></pre>:hexoPostRenderEscape–&gt;</p>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 大数类的应用</title>
    <link href="/2019/03/30/java-%E5%A4%A7%E6%95%B0%E7%B1%BB%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2019/03/30/java-%E5%A4%A7%E6%95%B0%E7%B1%BB%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h1><ul><li><a href="%E6%96%B9ttp://tool.oschina.net/apidocs/apidoc?api=jdk-zh">文档地址</a>;</li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><ul><li><a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh">文档地址</a></li></ul><pre><code class="hljs java">BigInteger a = BigInteger.ValueOf(<span class="hljs-string">&quot;1111111&quot;</span>);System.out.println(a.toString(n));<span class="hljs-comment">// n == 2 时转二进制 n == 3 时转三进制 以此类推</span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><pre><code class="hljs java">valueOf(parament); 将参数转换为指定类型add(); <span class="hljs-comment">//大数加法</span>substract(); <span class="hljs-comment">//减法</span>multiply(); <span class="hljs-comment">//乘法</span>divided(); <span class="hljs-comment">//相除取整</span>remainder(); <span class="hljs-comment">//取余</span>pow(); <span class="hljs-comment">//a.pow(b) = a ^ b</span>gcd(); <span class="hljs-comment">//最大公约数</span>abs(); <span class="hljs-comment">//绝对值</span>negate(); <span class="hljs-comment">//取反数</span>mod(); <span class="hljs-comment">//a.mod(b) = a % b = a.remainder(b)</span>max(); min();<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//比较</span><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//比较是否相等</span></code></pre><h1 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h1><ul><li><a href="http://tool.oschina.net/uploads/apidocs/jdk-zh/java/math/BigDecimal.html">文档地址</a>;</li></ul><h3 id="运算-1"><a href="#运算-1" class="headerlink" title="运算"></a>运算</h3><ul><li>与<code>BigInteger</code>的差不多</li></ul>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poj-1182 带权并查集</title>
    <link href="/2019/03/28/poj-1182-%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2019/03/28/poj-1182-%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="link"><a href="#link" class="headerlink" title="link"></a><a href="https://vjudge.net/contest/66964#problem/E">link</a></h1><h1 id="带权并查集做法-向量"><a href="#带权并查集做法-向量" class="headerlink" title="带权并查集做法 (向量)"></a>带权并查集做法 (向量)</h1><ul><li><a href="https://blog.csdn.net/niushuai666/article/details/6981689">参考博文</a></li><li>带权并查集与普通并查集的区别主要在<code>find()</code>和<code>uni()</code>上 在进行两项操作的同时要对节点的权值进行更新, 参考参考博文的做法, 使用了类似向量的思想</li></ul><h2 id="变量解释"><a href="#变量解释" class="headerlink" title="变量解释"></a>变量解释</h2><ul><li>node中<ul><li><code>per</code>父节点</li><li><code>rel</code>与父节点(即向量指向的节点)的关系<ul><li>0=&gt;同类 1=&gt;被父节点吃 2=&gt;吃父节点</li></ul></li><li><code>high</code>高度, 本题中没有 (至少我的码里没用..)</li></ul></li></ul><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>－假设有 pa, a, pb, b 四个节点, a 与 b 有关系, 具体如图</p><ul><li><p><img src="https://i.postimg.cc/vHRYKsZg/1.jpg"></p></li><li><p>将 pb 连接到 pa 时侯, 就可以很容易的得到 pa 与 pb 的关系</p></li><li><p><img src="https://i.postimg.cc/Nf1sqzKN/2.jpg"></p></li><li><p><code>b-&gt;pb + pb-&gt;pa = b-&gt;a + a-&gt;pa</code> 推出<code>pb-&gt;pa = b-&gt;a + a-&gt;pa - b-&gt;pb</code><br>转化为代码 <code>node[pb].rel = (d + node[a].rel - node[b].rel + 3) % 3;</code></p></li></ul><h2 id="find-同时压缩路径"><a href="#find-同时压缩路径" class="headerlink" title="find() (同时压缩路径)"></a>find() (同时压缩路径)</h2><ul><li><p>假设有 a, b, c 三个节点, 关系如图</p></li><li><p><img src="https://i.postimg.cc/GmKb9TJG/3.jpg"></p></li><li><p>将 c 连接到 a 时</p></li><li><p><img src="https://i.postimg.cc/bwpzz9bq/4.jpg"></p></li><li><p><code>c-&gt;a = c-&gt;b + b-&gt;a</code><br>转化为代码<code>node[a].rel = (node[a].rel + node[tmp].rel + 3) % 3;</code></p></li><li><p>通过 tmp 进行递归迭代进行路径压缩</p></li></ul><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : poj-1182-jq.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 22 09:57:18</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-comment">// 282ms</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">nodep</span>&#123;</span>    <span class="hljs-keyword">int</span> per;    <span class="hljs-keyword">int</span> high;    <span class="hljs-comment">//0=&gt;同类 1=&gt;被父节点吃 2=&gt;吃父节点</span>    <span class="hljs-keyword">int</span> rel;&#125;node[<span class="hljs-number">50100</span>];<span class="hljs-keyword">int</span> n, k;<span class="hljs-keyword">int</span> D[<span class="hljs-number">100010</span>];<span class="hljs-keyword">int</span> X[<span class="hljs-number">100010</span>];<span class="hljs-keyword">int</span> Y[<span class="hljs-number">100010</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n; i++)&#123;        node[i].per = i;        node[i].rel = <span class="hljs-number">0</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;    <span class="hljs-keyword">if</span>(node[a].per == a) <span class="hljs-keyword">return</span> a;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> tmp = node[a].per;        node[a].per = find(node[a].per);        node[a].rel = (node[a].rel + node[tmp].rel + <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;        <span class="hljs-keyword">return</span> node[a].per;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uni</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> d)</span></span>&#123;    <span class="hljs-keyword">int</span> pa = find(a);    <span class="hljs-keyword">int</span> pb = find(b);    <span class="hljs-keyword">if</span>(pa == pb) <span class="hljs-keyword">return</span> ;    <span class="hljs-comment">/*</span><span class="hljs-comment">    if(node[pa].high &gt; node[pb].high)&#123;</span><span class="hljs-comment">        node[pb].per = pa;</span><span class="hljs-comment">        node[pb].rel = (d + node[a].rel - node[b].rel + 3) % 3;</span><span class="hljs-comment">    &#125;else if(node[a].high &lt; node[b].high)&#123;</span><span class="hljs-comment">        node[a].per = b;</span><span class="hljs-comment">        node[pa].rel = (d + node[b].rel - node[a].rel + 3) % 3;</span><span class="hljs-comment">    &#125;else&#123;</span><span class="hljs-comment">        node[a].per = b;</span><span class="hljs-comment">        node[pa].rel = (d + node[b].rel - node[a].rel + 3) % 3;</span><span class="hljs-comment">        node[pb].high++;</span><span class="hljs-comment">    &#125;</span><span class="hljs-comment">    合并树 注意：被 a 吃，所以以 a 的根为父</span><span class="hljs-comment">    也就是说, 不能按照白书上介绍的那样进行压缩操作</span><span class="hljs-comment">    */</span>    node[pb].per = pa;    node[pb].rel = (d + node[a].rel - node[b].rel + <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">return</span> find(a) == find(b);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getrel</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-comment">// 所求为 a =&gt; b 的关系</span>    find(a);    find(b);    <span class="hljs-keyword">return</span> (node[a].rel - node[b].rel + <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;    init();    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;        <span class="hljs-keyword">int</span> d = D[i];        <span class="hljs-keyword">int</span> x = X[i] - <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> y = Y[i] - <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(d == <span class="hljs-number">2</span> &amp;&amp; x == y)&#123;            ans++;            <span class="hljs-keyword">continue</span>;        &#125;        <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span> || x &gt;= n || y &lt; <span class="hljs-number">0</span> || y &gt;= n)&#123;            ans++;            <span class="hljs-keyword">continue</span>;        &#125;        <span class="hljs-keyword">if</span>(same(x, y))&#123;            <span class="hljs-keyword">if</span>(d == <span class="hljs-number">1</span> &amp;&amp; getrel(x, y) != <span class="hljs-number">0</span>) ans++;            <span class="hljs-keyword">if</span>(d == <span class="hljs-number">2</span> &amp;&amp; getrel(x, y) != <span class="hljs-number">2</span>) ans++;        &#125;        uni(x, y, d - <span class="hljs-number">1</span>);    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, D + i, X + i, Y + i);    &#125;    solve();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h1 id="白书做法-分类"><a href="#白书做法-分类" class="headerlink" title="白书做法 (分类)"></a>白书做法 (分类)</h1><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : poj-2236.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 20 21:09:04</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-comment">// 329ms</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> par[<span class="hljs-number">150010</span>];<span class="hljs-keyword">int</span> high[<span class="hljs-number">150010</span>];<span class="hljs-keyword">int</span> D[<span class="hljs-number">100010</span>];<span class="hljs-keyword">int</span> X[<span class="hljs-number">100010</span>];<span class="hljs-keyword">int</span> Y[<span class="hljs-number">100010</span>];<span class="hljs-keyword">int</span> n, k;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        par[i] = i;        high[i] = <span class="hljs-number">0</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;    <span class="hljs-keyword">if</span>(par[a] == a) <span class="hljs-keyword">return</span> a;    <span class="hljs-keyword">else</span>&#123;         <span class="hljs-keyword">return</span> par[a] = find(par[a]);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unite</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;    a = find(a);    b = find(b);    <span class="hljs-keyword">if</span>(a == b) <span class="hljs-keyword">return</span> ;    <span class="hljs-keyword">if</span>(high[a] &gt; high[b])&#123;        par[b] = a;    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(high[a] &lt; high[b])&#123;        par[a] = b;    &#125;<span class="hljs-keyword">else</span>&#123;        par[a] = b;        high[b]++;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">return</span> find(a) == find(b);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;    init(n * <span class="hljs-number">3</span>);    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++)&#123;        <span class="hljs-keyword">int</span> d = D[j];        <span class="hljs-keyword">int</span> x = X[j] - <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> y = Y[j] - <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span> || x &gt;= n || y &lt; <span class="hljs-number">0</span> || y &gt;= n)&#123;            ans++;            <span class="hljs-keyword">continue</span>;        &#125;        <span class="hljs-keyword">if</span>(d == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">if</span>(same(x, y + n) || same(x, y + <span class="hljs-number">2</span> * n))&#123;                ans++;            &#125;<span class="hljs-keyword">else</span>&#123;                unite(x, y);                unite(x + n, y + n);                unite(x + <span class="hljs-number">2</span> * n, y + <span class="hljs-number">2</span> * n);            &#125;        &#125;        <span class="hljs-keyword">if</span>(d == <span class="hljs-number">2</span>)&#123;            <span class="hljs-keyword">if</span>(same(x, y) || same(x, y + <span class="hljs-number">2</span> * n))&#123;                ans++;            &#125;<span class="hljs-keyword">else</span>&#123;                unite(x, y + n);                unite(x + n, y + <span class="hljs-number">2</span> * n);                unite(x + <span class="hljs-number">2</span> * n, y);            &#125;        &#125;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;    <span class="hljs-keyword">int</span> din, xin, yin;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, D + i, X + i, Y + i);    &#125;    solve();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poj-1860 poj-3295 Bellman-Ford判断负权回路</title>
    <link href="/2019/03/28/poj-1860-poj-3295-Bellman-Ford%E5%88%A4%E6%96%AD%E8%B4%9F%E6%9D%83%E5%9B%9E%E8%B7%AF/"/>
    <url>/2019/03/28/poj-1860-poj-3295-Bellman-Ford%E5%88%A4%E6%96%AD%E8%B4%9F%E6%9D%83%E5%9B%9E%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="poj-1860"><a href="#poj-1860" class="headerlink" title="poj-1860"></a>poj-1860</h1><ul><li><a href="https://vjudge.net/contest/66569#problem/E">link</a></li></ul><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><blockquote><p>有多个兑换点, 每个兑换点可以兑换两种货币. 假设本来有的货币种类为s, 问能否通过不断兑换最终回到s并且使总金增加</p></blockquote><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>如果存在正权回路则说明可以钱无限增加, 找到正权回路直接输出<code>YES</code>就行了, 否则输出<code>NO</code></li></ul><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : poj-1860.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 24 15:43:13</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poin</span>&#123;</span>    <span class="hljs-keyword">int</span> a, b;    <span class="hljs-keyword">double</span> r, c;&#125;expp[<span class="hljs-number">220</span>];<span class="hljs-comment">// 刚开始定义的是exp[220], 不知道这是个关键字, 报错了</span><span class="hljs-keyword">int</span> nume;<span class="hljs-keyword">int</span> n, m, s;<span class="hljs-keyword">double</span> v;<span class="hljs-comment">// 到第[]种货币的最大值</span><span class="hljs-keyword">double</span> dis[<span class="hljs-number">101</span>];<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bell</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dis));    dis[s] = v;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nume; j++)&#123;            <span class="hljs-keyword">if</span>(dis[expp[j].b] &lt; (dis[expp[j].a] - expp[j].c) * expp[j].r)&#123;                dis[expp[j].b] = (dis[expp[j].a] - expp[j].c) * expp[j].r;                flag = <span class="hljs-literal">true</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span>(!flag) <span class="hljs-keyword">break</span>;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nume; j++) &#123;        <span class="hljs-keyword">if</span> (dis[expp[j].b] &lt; (dis[expp[j].a] - expp[j].c) * expp[j].r) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; v)&#123;        nume = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> exa, exb;        <span class="hljs-keyword">double</span> exra, exca, exrb, excb;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %lf %lf %lf %lf&quot;</span>, &amp;exa, &amp;exb, &amp;exra, &amp;exca, &amp;exrb, &amp;excb);            expp[nume].a = exa;            expp[nume].b = exb;            expp[nume].r = exra;            expp[nume++].c = exca;            expp[nume].a = exb;            expp[nume].b = exa;            expp[nume].r = exrb;            expp[nume++].c = excb;        &#125;        <span class="hljs-keyword">if</span>(bell()) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h1 id="poj-3295"><a href="#poj-3295" class="headerlink" title="poj-3295"></a>poj-3295</h1><ul><li><a href="https://vjudge.net/contest/66569#problem/E">link</a></li></ul><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><blockquote><p>有f个农场, 每个农场有n个点m条路, 有w个虫洞, 问针对每个农场能否看到以前的自己</p></blockquote><h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><ul><li>判断是否有负权回路, 有就可以</li></ul><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : poj-3295.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 24 17:15:01</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1&lt;&lt;28</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n, m, w;<span class="hljs-keyword">int</span> eee;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span>    <span class="hljs-keyword">int</span> a, b, cost;&#125;es[<span class="hljs-number">10010</span>];<span class="hljs-keyword">int</span> dis[<span class="hljs-number">10010</span>];<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bell</span><span class="hljs-params">()</span></span>&#123;    fill(dis, dis + n, INF);    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)&#123;        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; eee; j++)&#123;            <span class="hljs-keyword">if</span>(dis[es[j].b] &gt; dis[es[j].a] + es[j].cost)&#123;                dis[es[j].b] = dis[es[j].a] + es[j].cost;                flag = <span class="hljs-literal">true</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span>(!flag) <span class="hljs-keyword">break</span>;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; eee; j++) &#123;        <span class="hljs-keyword">if</span> (dis[es[j].b] &gt; dis[es[j].a] + es[j].cost) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> f;    <span class="hljs-built_in">cin</span> &gt;&gt; f;    <span class="hljs-keyword">while</span>(f--)&#123;        eee = <span class="hljs-number">0</span>;        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; w;        <span class="hljs-keyword">int</span> a, b, c;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);            es[eee].a = a;            es[eee].b = b;            es[eee++].cost = c;            es[eee].a = b;            es[eee].b = a;            es[eee++].cost = c;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; w; i++)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);            es[eee].a = a;            es[eee].b = b;            es[eee++].cost = -c;        &#125;        <span class="hljs-keyword">if</span>(bell()) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机端 Termux linux vim c++ 环境的配置</title>
    <link href="/2019/03/28/%E6%89%8B%E6%9C%BA%E7%AB%AF-Termux-linux-vim-c-%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/03/28/%E6%89%8B%E6%9C%BA%E7%AB%AF-Termux-linux-vim-c-%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>完成效果图</p></li><li><p><img src="https://i.loli.net/2018/10/21/5bcc26357626f.png"></p></li><li><p>本文在<a href="http://www.sqlsec.com/2018/05/termux.html#more">Termux 高级终端安装使用配置教程</a>的基础上进行vim的更深一步配置</p></li><li><p>感谢大佬的教程</p></li></ul><h1 id="1-gcc的安装"><a href="#1-gcc的安装" class="headerlink" title="1. gcc的安装"></a>1. gcc的安装</h1><ul><li>输入<code>pkg install clang</code></li><li>这个我不确定对不对了,如果出了错误请按照如下操作<blockquote><p>输入<code>gcc</code><br>会弹出一些信息,其中有一个pkg install ***<br>输入就可以了</p></blockquote></li></ul><h1 id="2-vimrc的配置"><a href="#2-vimrc的配置" class="headerlink" title="2. vimrc的配置"></a>2. vimrc的配置</h1><ol><li><p>输入命令<code>vim ~/.vimrc</code></p></li><li><p>在vimrc中添加如下代码</p></li></ol><pre><code class="hljs vim"><span class="hljs-keyword">nmap</span> <span class="hljs-symbol">&lt;c-c&gt;</span> :w! ~/storage/shared/<span class="hljs-keyword">copy</span>.txt<span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">4</span><span class="hljs-keyword">set</span> softtabstop=<span class="hljs-number">4</span><span class="hljs-keyword">set</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">4</span><span class="hljs-keyword">set</span> autoindent<span class="hljs-keyword">set</span> <span class="hljs-built_in">cindent</span><span class="hljs-keyword">set</span> smarttab:<span class="hljs-keyword">set</span> <span class="hljs-keyword">ts</span>=<span class="hljs-number">4</span>:<span class="hljs-keyword">set</span> expandtab:%retab!<span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><span class="hljs-keyword">set</span> laststatus=<span class="hljs-number">0</span><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><span class="hljs-keyword">filetype</span> <span class="hljs-keyword">on</span><span class="hljs-keyword">set</span> showcmd<span class="hljs-keyword">if</span> <span class="hljs-keyword">version</span> &gt;= <span class="hljs-number">603</span>    <span class="hljs-keyword">set</span> helplang=<span class="hljs-keyword">cn</span>    <span class="hljs-keyword">set</span> encoding=utf-<span class="hljs-number">8</span><span class="hljs-keyword">endif</span><span class="hljs-keyword">autocmd</span> BufNewFile *.cpp,*.[ch],*.<span class="hljs-keyword">sh</span>,*.java exec <span class="hljs-string">&quot;:call SetTitle()&quot;</span>func SetTitle()    <span class="hljs-keyword">if</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;sh&#x27;</span>        <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;\#########################################################################&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;\# File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;\# Author: Wqr_&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;\# mail: xueduanwei@126.com&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;\# Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot;\#########################################################################&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;\#!/bin/bash&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">call</span> <span class="hljs-built_in">setline</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;/*************************************************************************&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-string">&quot;    &gt; File Name: &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>, <span class="hljs-string">&quot;    &gt; Author: Wqr_&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">2</span>, <span class="hljs-string">&quot;    &gt; Mail: xueduanwei@126.com &quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>, <span class="hljs-string">&quot;    &gt; Created Time: &quot;</span>.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&quot;%c&quot;</span>))        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">4</span>, <span class="hljs-string">&quot; ************************************************************************/&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">endif</span>    <span class="hljs-keyword">if</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;cpp&#x27;</span>        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;#include&lt;iostream&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;#include&lt;cstdio&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">8</span>, <span class="hljs-string">&quot;#include&lt;cstring&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">9</span>, <span class="hljs-string">&quot;#include&lt;string&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">10</span>, <span class="hljs-string">&quot;#include&lt;vector&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">11</span>, <span class="hljs-string">&quot;#include&lt;algorithm&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">12</span>, <span class="hljs-string">&quot;using namespace std;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">13</span>, <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">endif</span>    <span class="hljs-keyword">if</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;c&#x27;</span>        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">6</span>, <span class="hljs-string">&quot;#include&lt;stdio.h&gt;&quot;</span>)        <span class="hljs-keyword">call</span> <span class="hljs-keyword">append</span>(<span class="hljs-built_in">line</span>(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">7</span>, <span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">endif</span>    <span class="hljs-keyword">autocmd</span> BufNewFile * <span class="hljs-keyword">normal</span> Gendfunc<span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;c-g&gt;</span> :<span class="hljs-keyword">call</span> CompileRunGcc()<span class="hljs-symbol">&lt;CR&gt;</span>func! CompileRunGcc()    exec <span class="hljs-string">&quot;w&quot;</span>    <span class="hljs-keyword">if</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;c&#x27;</span>        exec <span class="hljs-string">&quot;!g++ % -o %&lt;&quot;</span>        exec <span class="hljs-string">&quot;! ./%&lt;&quot;</span>    <span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;cpp&#x27;</span>        exec <span class="hljs-string">&quot;!g++ % -o %&lt;&quot;</span>        exec <span class="hljs-string">&quot;! ./%&lt;&quot;</span>    <span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;java&#x27;</span>        exec <span class="hljs-string">&quot;!javac %&quot;</span>        exec <span class="hljs-string">&quot;!java %&lt;&quot;</span>    <span class="hljs-keyword">elseif</span> &amp;<span class="hljs-keyword">filetype</span> == <span class="hljs-string">&#x27;sh&#x27;</span>        :!./%    <span class="hljs-keyword">endif</span>endfunc<span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;c-d&gt;</span> :<span class="hljs-keyword">call</span> Rungdb()<span class="hljs-symbol">&lt;CR&gt;</span>func! Rungdb()    exec <span class="hljs-string">&quot;w&quot;</span>    exec <span class="hljs-string">&quot;!g++ % -g -o %&lt;&quot;</span>    exec <span class="hljs-string">&quot;!gdb ./%&lt;&quot;</span>endfunc<span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">c</span>,cpp <span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;buffer&gt;</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-symbol">&lt;space&gt;</span> :<span class="hljs-keyword">w</span><span class="hljs-symbol">&lt;cr&gt;</span>:<span class="hljs-keyword">make</span><span class="hljs-symbol">&lt;cr&gt;</span><span class="hljs-keyword">set</span> completeopt=preview,<span class="hljs-keyword">menu</span><span class="hljs-comment">&quot;允许插件</span><span class="hljs-keyword">filetype</span> plugin <span class="hljs-keyword">on</span><span class="hljs-comment">&quot;共享剪贴板</span><span class="hljs-keyword">set</span> clipboard+=unnamed<span class="hljs-keyword">set</span> autowrite<span class="hljs-keyword">set</span> enc=utf-<span class="hljs-number">8</span><span class="hljs-keyword">set</span> fencs=utf-<span class="hljs-number">8</span>,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936<span class="hljs-comment">&quot;语言设置</span><span class="hljs-keyword">set</span> langmenu=zh_CN.UTF-<span class="hljs-number">8</span><span class="hljs-keyword">set</span> helplang=<span class="hljs-keyword">cn</span><span class="hljs-keyword">filetype</span> plugin <span class="hljs-keyword">on</span><span class="hljs-keyword">filetype</span> <span class="hljs-built_in">indent</span> <span class="hljs-keyword">on</span><span class="hljs-keyword">set</span> iskeyword+=_,$,@,%,#,-:<span class="hljs-keyword">inoremap</span> ( ()<span class="hljs-symbol">&lt;ESC&gt;</span>i:<span class="hljs-keyword">inoremap</span> ) <span class="hljs-symbol">&lt;c-r&gt;</span>=ClosePair(<span class="hljs-string">&#x27;)&#x27;</span>)<span class="hljs-symbol">&lt;CR&gt;</span>:<span class="hljs-keyword">inoremap</span> &#123; &#123;<span class="hljs-symbol">&lt;CR&gt;</span>&#125;<span class="hljs-symbol">&lt;ESC&gt;</span>O:<span class="hljs-keyword">inoremap</span> &#125; <span class="hljs-symbol">&lt;c-r&gt;</span>=ClosePair(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<span class="hljs-symbol">&lt;CR&gt;</span>:<span class="hljs-keyword">inoremap</span> [ []<span class="hljs-symbol">&lt;ESC&gt;</span>i:<span class="hljs-keyword">inoremap</span> ] <span class="hljs-symbol">&lt;c-r&gt;</span>=ClosePair(<span class="hljs-string">&#x27;]&#x27;</span>)<span class="hljs-symbol">&lt;CR&gt;</span>:<span class="hljs-keyword">inoremap</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-comment">&quot;&lt;ESC&gt;i</span>:<span class="hljs-keyword">inoremap</span> <span class="hljs-string">&#x27; &#x27;</span><span class="hljs-string">&#x27;&lt;ESC&gt;i</span><span class="hljs-string">function! ClosePair(char)</span><span class="hljs-string">    if getline(&#x27;</span>.<span class="hljs-string">&#x27;)[col(&#x27;</span>.<span class="hljs-string">&#x27;) - 1] == a:char</span><span class="hljs-string">        return &quot;\&lt;Right&gt;&quot;</span><span class="hljs-string">    else</span><span class="hljs-string">        return a:char</span><span class="hljs-string">    endif</span><span class="hljs-string">endfunction</span><span class="hljs-string">filetype plugin indent on</span><span class="hljs-string">&quot;打开文件类型检测, 加了这句才可以用智能补全</span><span class="hljs-string"></span><span class="hljs-string">set completeopt=longest,menu</span></code></pre><ol><li><p>解释</p><ul><li><p>我在根目录下创建了一个名为<code>copy.txt</code>的文件,用来作为系统间复制的桥梁,这个copy.txt需要手动进行创建</p><ul><li><code>&lt;c-c&gt;</code>代表ctrl + c 以此类推</li><li>在此操作后会执行命令<code>:w! ~/storage/shared/copy.txt</code>将文件保存到copy.txt中</li><li>需要注意的是,执行此操作需要文件有相应的权限,使用<code>chmod</code>指令操作,由于条件比较复杂,具体请自行百度</li></ul></li><li><p><code>ctrl + g</code>可以启用gcc进行编译,<code>ctrl + d</code>可以启用gdb进行调试</p></li><li><p>预添加了头文件和一些信息,可以按需求修改</p></li></ul></li></ol><h1 id="3-插件的安装-可跳过"><a href="#3-插件的安装-可跳过" class="headerlink" title="3. 插件的安装(可跳过)"></a>3. 插件的安装(可跳过)</h1><h2 id="1-安装vundle"><a href="#1-安装vundle" class="headerlink" title="1. 安装vundle"></a>1. 安装<a href="https://github.com/VundleVim/Vundle.vim">vundle</a></h2><ol><li><p><a href="https://github.com/VundleVim/Vundle.vim">link</a></p></li><li><p>首先<code>cd ~/.vim</code>如果没有此文件夹则使用<code>mkdir</code>创建一个</p></li><li><p>在.vim文件夹中创建文件夹bundle<code>mkdir bundle</code></p></li><li><p>执行<code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></p><ul><li>可能没有git 按提示操作即可</li></ul></li><li><p>在.vimrc中前添加如下代码</p></li></ol><pre><code class="hljs vim"><span class="hljs-keyword">set</span> nocompatible              <span class="hljs-comment">&quot; be iMproved, required</span><span class="hljs-keyword">filetype</span> off                  <span class="hljs-comment">&quot; required</span><span class="hljs-comment">&quot; set the runtime path to include Vundle and initialize</span><span class="hljs-keyword">set</span> rtp+=~/.<span class="hljs-keyword">vim</span>/bundle/Vundle.<span class="hljs-keyword">vim</span><span class="hljs-keyword">call</span> vundle#begin()<span class="hljs-comment">&quot; alternatively, pass a path where Vundle should install plugins</span><span class="hljs-comment">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><span class="hljs-comment">&quot; let Vundle manage Vundle, required</span>Plugin <span class="hljs-string">&#x27;VundleVim/Vundle.vim&#x27;</span><span class="hljs-comment">&quot; The following are examples of different formats supported.</span><span class="hljs-comment">&quot; Keep Plugin commands between vundle#begin/end.</span><span class="hljs-comment">&quot; plugin on GitHub repo</span>Plugin <span class="hljs-string">&#x27;tpope/vim-fugitive&#x27;</span><span class="hljs-comment">&quot; plugin from http://vim-scripts.org/vim/scripts.html</span><span class="hljs-comment">&quot; Plugin &#x27;L9&#x27;</span><span class="hljs-comment">&quot; Git plugin not hosted on GitHub</span>Plugin <span class="hljs-string">&#x27;git://git.wincent.com/command-t.git&#x27;</span><span class="hljs-comment">&quot; git repos on your local machine (i.e. when working on your own plugin)</span>Plugin <span class="hljs-string">&#x27;file:///home/gmarik/path/to/plugin&#x27;</span><span class="hljs-comment">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span><span class="hljs-comment">&quot; Pass the path to set the runtimepath properly.</span>Plugin <span class="hljs-string">&#x27;rstacruz/sparkup&#x27;</span>, &#123;<span class="hljs-string">&#x27;rtp&#x27;</span>: <span class="hljs-string">&#x27;vim/&#x27;</span>&#125;<span class="hljs-comment">&quot; Install L9 and avoid a Naming conflict if you&#x27;ve already installed a</span><span class="hljs-comment">&quot; different version somewhere else.</span><span class="hljs-comment">&quot; Plugin &#x27;ascenator/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span><span class="hljs-comment">&quot; All of your Plugins must be added before the following line</span><span class="hljs-keyword">call</span> vundle#end()            <span class="hljs-comment">&quot; required</span><span class="hljs-keyword">filetype</span> plugin <span class="hljs-built_in">indent</span> <span class="hljs-keyword">on</span>    <span class="hljs-comment">&quot; required</span><span class="hljs-comment">&quot; To ignore plugin indent changes, instead use:</span><span class="hljs-comment">&quot;filetype plugin on</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot; Brief help</span><span class="hljs-comment">&quot; :PluginList       - lists configured plugins</span><span class="hljs-comment">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span><span class="hljs-comment">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span><span class="hljs-comment">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span><span class="hljs-comment">&quot;</span><span class="hljs-comment">&quot; see :h vundle for more details or wiki for FAQ</span><span class="hljs-comment">&quot; Put your non-Plugin stuff after this line</span></code></pre><h2 id="2-安装缩进可视化插件"><a href="#2-安装缩进可视化插件" class="headerlink" title="2. 安装缩进可视化插件"></a>2. 安装<a href="https://github.com/Yggdroot/indentLine">缩进可视化插件</a></h2><ol><li><a href="https://github.com/Yggdroot/indentLine">link</a></li><li>将文件下载并解压到<code>~/.vim/bundle/</code>目录下</li><li>在前面刚添加的代码块中添加<code>Plugin &#39;Yggdroot/indentLine&#39;</code></li><li>在前面添加的代码块后添加<code>let g:indentLine_color_term = 239</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Termux</tag>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL 下 vim 的系统间复制</title>
    <link href="/2019/03/28/WSL-%E4%B8%8B-vim-%E7%9A%84%E7%B3%BB%E7%BB%9F%E9%97%B4%E5%A4%8D%E5%88%B6/"/>
    <url>/2019/03/28/WSL-%E4%B8%8B-vim-%E7%9A%84%E7%B3%BB%E7%BB%9F%E9%97%B4%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<ul><li><p>WSL 通过 clip.exe 可以与 windows 的剪切板连接</p></li><li><p>通过指令</p><pre><code class="hljs css"><span class="hljs-selector-pseudo">:w</span> !<span class="hljs-selector-tag">clip</span><span class="hljs-selector-class">.exe</span></code></pre></li><li><p>通过 vim 的 nmap 可以使用快捷键快速操作</p></li><li><p>在~/.vimrc中添加</p></li></ul><pre><code class="hljs llvm">namp &lt;<span class="hljs-keyword">c</span>-<span class="hljs-keyword">c</span>&gt; :w <span class="hljs-title">!clip.exe</span></code></pre><ul><li>也可以使用同样的方式仅复制一部分内容</li></ul>]]></content>
    
    
    <categories>
      
      <category>环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蚁群算法解决tsp以及不闭合tsp问题</title>
    <link href="/2019/03/28/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3tsp%E4%BB%A5%E5%8F%8A%E4%B8%8D%E9%97%AD%E5%90%88tsp%E9%97%AE%E9%A2%98/"/>
    <url>/2019/03/28/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3tsp%E4%BB%A5%E5%8F%8A%E4%B8%8D%E9%97%AD%E5%90%88tsp%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p><a href="http://www.cnblogs.com/asxinyu/p/Path_Optimization_Tsp_Problem_Ant_System_CSharp.html#_label0">思路来源</a>, 这篇文章里介绍的真的是非常详细, 文章中有大连理工大学的pdf, 也可也学到很多</p></li><li><p>蚁群算法属于智能算法, 并不一定收敛到最优解, 但对75点一下规模的问题能很好的解决</p></li><li><p><a href="https://blog.csdn.net/wenzhunpu/article/details/54100051">代码参考</a></p></li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>tsp问题的思路在前言中的文章里已经有了详细的介绍, 所以只介绍我解决不闭合tsp问题的思路</li></ul><h1 id="tsp问题的解决"><a href="#tsp问题的解决" class="headerlink" title="tsp问题的解决"></a>tsp问题的解决</h1><ul><li><p>原理见前言文章与code, 仅展示下结果和逻辑图</p></li><li><p>30个点感觉并不是很好</p></li><li><p><img src="https://i.loli.net/2018/11/05/5bdfa083a99f4.png"></p></li><li><p><img src="https://i.loli.net/2018/11/05/5bdfa00f46a2d.png"></p></li><li><p>50点</p></li><li><p><img src="https://i.loli.net/2018/11/05/5bdfa021768e2.png"></p></li></ul><h1 id="不闭合tsp问题的解决"><a href="#不闭合tsp问题的解决" class="headerlink" title="不闭合tsp问题的解决"></a>不闭合tsp问题的解决</h1><ul><li>与tsp问题类似, 但主要差别只遍历所有的点但不返回原点.</li></ul><ol><li><p>第一阶段</p><ol><li>在随机的城市生成蚂蚁, 蚂蚁的总数量与城市数量相等</li><li>每一只蚂蚁通过由信息素与能见度共同决定的规则产生前往不同城市的概率, 并以这个概率随机决定下一个城市</li><li>所有蚂蚁回到原点后更新每条路径上的信息素含量</li><li>达到遍历次数后进入第二阶段</li></ol></li><li><p>第二阶段</p><ol><li>在随机的城市生成SUPER蚂蚁, SUPER蚂蚁的总数量与城市数量相等</li><li>每一只SUPER蚂蚁通过由信息素与能见度共同决定的规则产生前往不同城市的概率, 并以这个概率随机决定下一个城市</li><li>所有SUPER蚂蚁遍历过除了<em>不闭合tsp问题的起点</em>外的所有的点前往<em>不闭合tsp问题的起点</em></li><li>计算并不断更新最短路径的SUPER蚂蚁</li><li>达到迭代次数后输出最短路径的SUPER蚂蚁</li></ol><ul><li><img src="https://i.loli.net/2018/11/05/5bdf9ed0e3448.png" alt="第一阶段"></li><li><img src="https://i.loli.net/2018/11/05/5bdf9ef73961d.png" alt="第二阶段"></li></ul></li></ol><ul><li><p>与简单贪心的比较</p><ul><li>30 点</li><li><img src="https://i.loli.net/2018/11/05/5bdf9f80441c0.png"></li><li>50 点</li><li><img src="https://i.loli.net/2018/11/05/5bdf9fa745a41.png"></li></ul></li><li><p>code </p></li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: YiQun_Tsp.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: Sun Oct 14 22:56:12 2018</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-comment">// 这个是返回的</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> random(x)(rand()%x)</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">30</span>; <span class="hljs-comment">// 城市的数量以及蚂蚁的数量</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ANT_NUM = NUM; <span class="hljs-comment">// 蚂蚁的数量</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> CITY_NUM = NUM; <span class="hljs-comment">// 城市</span><span class="hljs-keyword">double</span> dis[NUM][NUM];<span class="hljs-keyword">double</span> info[NUM][NUM];<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> mmax = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>;<span class="hljs-keyword">double</span> tanXindis;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TNUM 2000</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALPHA 1</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BETA 4</span><span class="hljs-comment">//返回指定范围内的随机整数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nLow, <span class="hljs-keyword">int</span> nUpper)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> nLow + (nUpper - nLow)*rand() / (RAND_MAX + <span class="hljs-number">1</span>);&#125;<span class="hljs-comment">//返回指定范围内的随机浮点数</span><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-keyword">double</span> dbLow, <span class="hljs-keyword">double</span> dbUpper)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">double</span> dbTemp = rand() / ((<span class="hljs-keyword">double</span>)RAND_MAX + <span class="hljs-number">1.0</span>);    <span class="hljs-keyword">return</span> dbLow + dbTemp * (dbUpper - dbLow);&#125;<span class="hljs-comment">// 蚁群的语句</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Ant</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> Path[CITY_NUM];  <span class="hljs-comment">//路径顺序</span>    <span class="hljs-keyword">double</span> length;  <span class="hljs-comment">//路径长度</span>    <span class="hljs-keyword">int</span> visit[CITY_NUM]; <span class="hljs-comment">//记录城市是否被访问过</span>    <span class="hljs-keyword">int</span> now;   <span class="hljs-comment">//当前城市</span>    <span class="hljs-keyword">int</span> visitNo;    <span class="hljs-comment">//第几个城市</span>    <span class="hljs-comment">//初始化</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">memset</span>(visit, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(visit));        length = <span class="hljs-number">0</span>;        now = rnd(<span class="hljs-number">0</span>, CITY_NUM);<span class="hljs-comment">//随机选择一个出发城市</span>        Path[<span class="hljs-number">0</span>] = now;        visit[now] = <span class="hljs-number">1</span>;        visitNo = <span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">//选择下一个城市</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chooseNextCity</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> next = <span class="hljs-number">-1</span>; <span class="hljs-comment">//下一个城市的编号</span>        <span class="hljs-comment">//计算当前城市和没去过的城市之间的信息素总和</span>        <span class="hljs-keyword">double</span> dbTotal = <span class="hljs-number">0.0</span>;        <span class="hljs-keyword">double</span> gaiLv[CITY_NUM]; <span class="hljs-comment">//各个城市被选中的概率</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++)        &#123;            <span class="hljs-keyword">if</span> (!visit[i])            &#123;                gaiLv[i] = <span class="hljs-built_in">pow</span>(info[now][i], ALPHA)                    *<span class="hljs-built_in">pow</span>(<span class="hljs-number">1.0</span> / dis[now][i], BETA);                dbTotal += gaiLv[i];            &#125;            <span class="hljs-keyword">else</span>            &#123;                gaiLv[i] = <span class="hljs-number">0</span>;            &#125;        &#125;        <span class="hljs-comment">//进行轮盘赌博 (随缘</span>        <span class="hljs-keyword">double</span> dbTemp = <span class="hljs-number">0.0</span>;        <span class="hljs-keyword">if</span> (dbTotal &gt; <span class="hljs-number">0.0</span>)        &#123;            dbTemp = rnd(<span class="hljs-number">0.0</span>, dbTotal);            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++)            &#123;                <span class="hljs-keyword">if</span> (!visit[i])                &#123;                    dbTemp -= gaiLv[i];                    <span class="hljs-keyword">if</span> (dbTemp &lt; <span class="hljs-number">0.0</span>)                    &#123;                        next = i;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;            &#125;        &#125;        <span class="hljs-comment">// 如果信息素含量很小, 就选出现的第一个</span>        <span class="hljs-keyword">if</span> (next == <span class="hljs-number">-1</span>)        &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; CITY_NUM; i++)            &#123;                <span class="hljs-keyword">if</span> (!visit[i])                &#123;                    next = i;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> next;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> next = chooseNextCity();        Path[visitNo] = next;        visit[next] = <span class="hljs-number">1</span>;        now = next;        <span class="hljs-comment">// 计算新的距离</span>        length += dis[Path[visitNo - <span class="hljs-number">1</span>]][Path[visitNo]];        visitNo++;    &#125;    <span class="hljs-comment">// 搜索</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Search</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        Init();        <span class="hljs-comment">// 经过所有城市</span>        <span class="hljs-keyword">while</span> (visitNo &lt; CITY_NUM)        &#123;            Move();        &#125;        <span class="hljs-comment">// 回到起始点</span>        length += dis[Path[CITY_NUM - <span class="hljs-number">1</span>]][Path[<span class="hljs-number">0</span>]];    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TSP</span></span><span class="hljs-class">&#123;</span>    Ant ants[ANT_NUM];  <span class="hljs-comment">//一群蚂蚁</span>    Ant bestAnt; <span class="hljs-comment">// 路径最短的蚂蚁</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//初始化环境信息素</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++)        &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; CITY_NUM; j++)            &#123;                info[i][j] = ANT_NUM * <span class="hljs-number">15</span> / tanXindis;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Updateinfo</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">double</span> tmpinfo[CITY_NUM][CITY_NUM];        <span class="hljs-built_in">memset</span>(tmpinfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(tmpinfo));        <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;        <span class="hljs-comment">//遍历每只蚂蚁</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ANT_NUM; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; CITY_NUM; j++)            &#123;                m = ants[i].Path[j];                n = ants[i].Path[j - <span class="hljs-number">1</span>];                tmpinfo[n][m] = tmpinfo[n][m] + <span class="hljs-number">3</span> * ANT_NUM / ants[i].length;                tmpinfo[m][n] = tmpinfo[n][m];            &#125;            <span class="hljs-comment">//最后城市和开始城市之间的信息素</span>            n = ants[i].Path[<span class="hljs-number">0</span>];            tmpinfo[n][m] = tmpinfo[n][m] + <span class="hljs-number">3</span> * ANT_NUM / ants[i].length;            tmpinfo[m][n] = tmpinfo[n][m];        &#125;        <span class="hljs-comment">//更新环境信息素</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++)        &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; CITY_NUM; j++) &#123;                <span class="hljs-comment">//最新的环境信息素 = 留存的信息素 + 新留下的信息素</span>                info[i][j] = info[i][j] * <span class="hljs-number">0.5</span> + tmpinfo[i][j];            &#125;        &#125;    &#125;    <span class="hljs-comment">//寻找路径，迭代TNUM次</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Search</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        bestAnt.length = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TNUM; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; ANT_NUM; j++) &#123;                ants[j].Search();            &#125;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; ANT_NUM; j++) &#123;                <span class="hljs-keyword">if</span> (bestAnt.length &gt; ants[j].length) &#123;                    bestAnt = ants[j];                &#125;            &#125;            Updateinfo();        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++) &#123;            <span class="hljs-keyword">if</span> (i) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;            <span class="hljs-built_in">cout</span> &lt;&lt; bestAnt.Path[i];        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; bestAnt.Path[<span class="hljs-number">0</span>];        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;距离为 : &quot;</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; bestAnt.length &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;&#125;;<span class="hljs-comment">// 贪心法的语句</span><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">TanXin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span>* visit, <span class="hljs-keyword">double</span> sum, <span class="hljs-keyword">int</span>* shunXv, <span class="hljs-keyword">int</span> pointNum)</span> </span>&#123;    <span class="hljs-keyword">int</span> flag = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span>) &#123;            flag = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> sum;    <span class="hljs-keyword">double</span> min = <span class="hljs-number">1000000</span>;    <span class="hljs-keyword">int</span> to;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (dis[from][i] &lt; min &amp;&amp; visit[i] == <span class="hljs-number">0</span>) &#123;            min = dis[from][i];            to = i;        &#125;    &#125;    sum += dis[from][to];    visit[to] = <span class="hljs-number">1</span>;    shunXv[pointNum++] = to;    <span class="hljs-keyword">return</span> TanXin(to, visit, sum, shunXv, pointNum);&#125;<span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">qiujv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> y1, <span class="hljs-keyword">int</span> x2, <span class="hljs-keyword">int</span> y2)</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((<span class="hljs-keyword">double</span>)(x1 - x2)*(x1 - x2) + (<span class="hljs-keyword">double</span>)(y1 - y2)*(y1 - y2));&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> &#123;</span>    <span class="hljs-keyword">int</span> x;    <span class="hljs-keyword">int</span> y;&#125;;<span class="hljs-comment">// 主函数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// fanWei 代表范围</span>    <span class="hljs-comment">// chuShi 代表起始位置, 即0</span>    <span class="hljs-keyword">int</span> fanWei;    <span class="hljs-keyword">int</span> chuShi = <span class="hljs-number">0</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入范围 : &quot;</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; fanWei;    point point[NUM];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        point[i].x = random(fanWei);        point[i].y = random(fanWei);    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; NUM; j++) &#123;            dis[i][j] = qiujv(point[i].x, point[i].y, point[j].x, point[j].y);        &#125;    &#125;    <span class="hljs-keyword">double</span> min = <span class="hljs-number">100000</span>; <span class="hljs-comment">// 最小值</span>    <span class="hljs-keyword">int</span> to; <span class="hljs-comment">//要去的</span>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>; <span class="hljs-comment">//总数</span>    <span class="hljs-keyword">int</span> shunXv[NUM] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 顺序</span>    <span class="hljs-keyword">int</span> visit[NUM] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 储存访问过的点</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (dis[<span class="hljs-number">0</span>][i] &lt; min) &#123;            min = dis[<span class="hljs-number">0</span>][i];            to = i;        &#125;    &#125;    sum += dis[<span class="hljs-number">0</span>][to];    shunXv[<span class="hljs-number">1</span>] = to;    visit[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;    visit[to] = <span class="hljs-number">1</span>;    tanXindis = TanXin(to, visit, sum, shunXv, <span class="hljs-number">2</span>);    tanXindis += dis[shunXv[<span class="hljs-number">49</span>]][<span class="hljs-number">0</span>];    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*********** 贪心的结果 **********&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (i) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; shunXv[i];    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; <span class="hljs-number">0</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;距离为 : &quot;</span> &lt;&lt; tanXindis &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*********** 蚁群的结果 **********&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    TSP tsp;    tsp.Init();    tsp.Search();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-comment">/*************************************************************************</span><span class="hljs-comment">    &gt; File Name: YiQun.cpp</span><span class="hljs-comment">    &gt; Author: Wqr_</span><span class="hljs-comment">    &gt; Mail: xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time: Sun Oct 14 22:56:12 2018</span><span class="hljs-comment"> ************************************************************************/</span><span class="hljs-comment">// 这个是不返回起点的</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;pch.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> random(x)(rand()%x)</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> NUM = <span class="hljs-number">30</span>; <span class="hljs-comment">// 城市的数量以及蚂蚁的数量</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ANT_NUM = NUM; <span class="hljs-comment">// 蚂蚁的数量</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> CITY_NUM = NUM; <span class="hljs-comment">// 城市</span><span class="hljs-keyword">double</span> dis[NUM][NUM];<span class="hljs-keyword">double</span> info[NUM][NUM];<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> mmax = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>;<span class="hljs-keyword">double</span> tanXindis;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TNUM 2000</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALPHA 1</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BETA 4</span><span class="hljs-comment">//返回指定范围内的随机整数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nLow, <span class="hljs-keyword">int</span> nUpper)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> nLow + (nUpper - nLow)*rand() / (RAND_MAX + <span class="hljs-number">1</span>);&#125;<span class="hljs-comment">//返回指定范围内的随机浮点数</span><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-keyword">double</span> dbLow, <span class="hljs-keyword">double</span> dbUpper)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">double</span> dbTemp = rand() / ((<span class="hljs-keyword">double</span>)RAND_MAX + <span class="hljs-number">1.0</span>);    <span class="hljs-keyword">return</span> dbLow + dbTemp * (dbUpper - dbLow);&#125;<span class="hljs-comment">// 蚁群的语句</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Ant</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int</span> Path[CITY_NUM];  <span class="hljs-comment">//路径顺序</span>    <span class="hljs-keyword">double</span> length;  <span class="hljs-comment">//路径长度</span>    <span class="hljs-keyword">int</span> visit[CITY_NUM]; <span class="hljs-comment">//记录城市是否被访问过</span>    <span class="hljs-keyword">int</span> now;   <span class="hljs-comment">//当前城市</span>    <span class="hljs-keyword">int</span> visitNo;    <span class="hljs-comment">//第几个城市</span>    <span class="hljs-comment">//初始化</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">memset</span>(visit, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(visit));        length = <span class="hljs-number">0</span>;        now = rnd(<span class="hljs-number">1</span>, CITY_NUM);<span class="hljs-comment">//随机选择一个除0的城市出发城市</span>        Path[<span class="hljs-number">0</span>] = now;        visit[now] = <span class="hljs-number">1</span>;        visitNo = <span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">//选择下一个城市</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chooseNextCity</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> next = <span class="hljs-number">-1</span>; <span class="hljs-comment">//下一个城市的编号</span>        <span class="hljs-comment">//计算当前城市和没去过的城市之间的信息素总和</span>        <span class="hljs-keyword">double</span> dbTotal = <span class="hljs-number">0.0</span>;        <span class="hljs-keyword">double</span> gaiLv[CITY_NUM]; <span class="hljs-comment">//各个城市被选中的概率</span>        <span class="hljs-comment">// 因为0点作为起点, 所以不计入循环</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; CITY_NUM; i++)        &#123;            <span class="hljs-keyword">if</span> (!visit[i])            &#123;                gaiLv[i] = <span class="hljs-built_in">pow</span>(info[now][i], ALPHA)                    *<span class="hljs-built_in">pow</span>(<span class="hljs-number">1.0</span> / dis[now][i], BETA);                dbTotal += gaiLv[i];            &#125;            <span class="hljs-keyword">else</span>            &#123;                gaiLv[i] = <span class="hljs-number">0</span>;            &#125;        &#125;        <span class="hljs-comment">//进行轮盘赌博 (随缘</span>        <span class="hljs-keyword">double</span> dbTemp = <span class="hljs-number">0.0</span>;        <span class="hljs-keyword">if</span> (dbTotal &gt; <span class="hljs-number">0.0</span>)        &#123;            dbTemp = rnd(<span class="hljs-number">0.0</span>, dbTotal);            <span class="hljs-comment">// 因为0点作为起点, 所以不计入循环</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; CITY_NUM; i++)            &#123;                <span class="hljs-keyword">if</span> (!visit[i])                &#123;                    dbTemp -= gaiLv[i];                    <span class="hljs-keyword">if</span> (dbTemp &lt; <span class="hljs-number">0.0</span>)                    &#123;                        next = i;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;            &#125;        &#125;        <span class="hljs-comment">// 如果信息素含量很小, 就选出现的第一个</span>        <span class="hljs-keyword">if</span> (next == <span class="hljs-number">-1</span>)        &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; CITY_NUM; i++)            &#123;                <span class="hljs-keyword">if</span> (!visit[i])                &#123;                    next = i;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> next;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> next = chooseNextCity();        Path[visitNo] = next;        visit[next] = <span class="hljs-number">1</span>;        now = next;        <span class="hljs-comment">// 计算新的距离</span>        length += dis[Path[visitNo - <span class="hljs-number">1</span>]][Path[visitNo]];        visitNo++;    &#125;    <span class="hljs-comment">// 搜索</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Search</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        Init();        <span class="hljs-comment">// 经过除去零点的所有城市</span>        <span class="hljs-keyword">while</span> (visitNo &lt; CITY_NUM - <span class="hljs-number">1</span>)        &#123;            Move();        &#125;        <span class="hljs-comment">// 回到0点</span>        Path[CITY_NUM - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;        visit[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        length += dis[Path[CITY_NUM - <span class="hljs-number">1</span> - <span class="hljs-number">1</span>]][Path[CITY_NUM - <span class="hljs-number">1</span>]];    &#125;&#125;;<span class="hljs-comment">// 从零点出发的超级蚂蚁</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SuperAnt</span> &#123;</span>    <span class="hljs-keyword">int</span> Path[CITY_NUM];  <span class="hljs-comment">//路径顺序</span>    <span class="hljs-keyword">double</span> length;  <span class="hljs-comment">//路径长度</span>    <span class="hljs-keyword">int</span> visit[CITY_NUM]; <span class="hljs-comment">//记录城市是否被访问过</span>    <span class="hljs-keyword">int</span> now;   <span class="hljs-comment">//当前城市</span>    <span class="hljs-keyword">int</span> visitNo;    <span class="hljs-comment">//第几个城市</span>    <span class="hljs-comment">//初始化</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">memset</span>(visit, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(visit));        length = <span class="hljs-number">0</span>;        now = <span class="hljs-number">0</span>; <span class="hljs-comment">// 以0为起始城市</span>        Path[<span class="hljs-number">0</span>] = now;        visit[now] = <span class="hljs-number">1</span>;        visitNo = <span class="hljs-number">1</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chooseNextCity</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> next = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">double</span> dbTotal = <span class="hljs-number">0.0</span>;        <span class="hljs-keyword">double</span> gaiLv[CITY_NUM];        <span class="hljs-comment">// 因为 0 已经被选中 , 不再重复选择</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; CITY_NUM; i++)        &#123;            <span class="hljs-keyword">if</span> (!visit[i])            &#123;                gaiLv[i] = <span class="hljs-built_in">pow</span>(info[now][i], ALPHA)                    *<span class="hljs-built_in">pow</span>(<span class="hljs-number">1.0</span> / dis[now][i], BETA);                dbTotal += gaiLv[i];            &#125;            <span class="hljs-keyword">else</span>            &#123;                gaiLv[i] = <span class="hljs-number">0</span>;            &#125;        &#125;        <span class="hljs-comment">//进行轮盘赌博 (随缘</span>        <span class="hljs-keyword">double</span> dbTemp = <span class="hljs-number">0.0</span>;        <span class="hljs-keyword">if</span> (dbTotal &gt; <span class="hljs-number">0.0</span>)        &#123;            dbTemp = rnd(<span class="hljs-number">0.0</span>, dbTotal);            <span class="hljs-comment">// 因为 0 已经被选中 , 不再重复选择</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; CITY_NUM; i++)            &#123;                <span class="hljs-keyword">if</span> (!visit[i])                &#123;                    dbTemp -= gaiLv[i];                    <span class="hljs-keyword">if</span> (dbTemp &lt; <span class="hljs-number">0.0</span>)                    &#123;                        next = i;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;            &#125;        &#125;        <span class="hljs-keyword">if</span> (next == <span class="hljs-number">-1</span>)        &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; CITY_NUM; i++)            &#123;                <span class="hljs-keyword">if</span> (!visit[i]) <span class="hljs-comment">//城市没去过</span>                &#123;                    next = i;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> next;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Move</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> next = chooseNextCity();        Path[visitNo] = next;        visit[next] = <span class="hljs-number">1</span>;        now = next;        length += dis[Path[visitNo - <span class="hljs-number">1</span>]][Path[visitNo]];        visitNo++;    &#125;    <span class="hljs-comment">//搜索</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Search</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        Init();        <span class="hljs-comment">// 让超级蚂蚁经过所有城市</span>        <span class="hljs-keyword">while</span> (visitNo &lt; CITY_NUM)        &#123;            Move();        &#125;    &#125;&#125;;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TSP</span></span><span class="hljs-class">&#123;</span>    Ant ants[ANT_NUM];  <span class="hljs-comment">//一群蚂蚁</span>    SuperAnt SuperAnts[ANT_NUM]; <span class="hljs-comment">//一群超级蚂蚁</span>    SuperAnt bestSuperAnt; <span class="hljs-comment">// 路径最短的超级蚂蚁</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//初始化环境信息素</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++)        &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; CITY_NUM; j++)            &#123;                info[i][j] = ANT_NUM * <span class="hljs-number">15</span> / tanXindis;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Updateinfo</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//puts(&quot;update info&quot;);</span>        <span class="hljs-keyword">double</span> tmpinfo[CITY_NUM][CITY_NUM];        <span class="hljs-built_in">memset</span>(tmpinfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(tmpinfo));        <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;        <span class="hljs-comment">//遍历每只蚂蚁</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ANT_NUM; i++) &#123;            <span class="hljs-comment">//puts(&quot;&quot;);</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; CITY_NUM; j++)            &#123;                m = ants[i].Path[j];                n = ants[i].Path[j - <span class="hljs-number">1</span>];                <span class="hljs-comment">//printf(&quot;%d %d\n&quot;, m, n);</span>                tmpinfo[n][m] = tmpinfo[n][m] + <span class="hljs-number">3</span> * ANT_NUM / ants[i].length;                tmpinfo[m][n] = tmpinfo[n][m];            &#125;            <span class="hljs-comment">//最后城市和开始城市之间的信息素</span>            n = ants[i].Path[<span class="hljs-number">0</span>];            tmpinfo[n][m] = tmpinfo[n][m] + <span class="hljs-number">3</span> * ANT_NUM / ants[i].length;            tmpinfo[m][n] = tmpinfo[n][m];        &#125;        <span class="hljs-comment">//更新环境信息素</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++)        &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; CITY_NUM; j++) &#123;                <span class="hljs-comment">//最新的环境信息素 = 留存的信息素 + 新留下的信息素</span>                info[i][j] = info[i][j] * <span class="hljs-number">0.5</span> + tmpinfo[i][j];            &#125;        &#125;    &#125;    <span class="hljs-comment">//寻找路径，迭代TMAC次</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Search</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; TNUM; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; ANT_NUM; j++) &#123;                ants[j].Search();            &#125;            <span class="hljs-comment">//更新环境信息素</span>            Updateinfo();        &#125;        bestSuperAnt.length = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>;        <span class="hljs-comment">// 从起点出发多只蚂蚁</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; TNUM; j++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ANT_NUM; i++) &#123;                SuperAnts[i].Search();                <span class="hljs-keyword">if</span> (SuperAnts[i].length &lt; bestSuperAnt.length) &#123;                    bestSuperAnt = SuperAnts[i];                &#125;            &#125;        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CITY_NUM; i++) &#123;            <span class="hljs-keyword">if</span> (i) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;            <span class="hljs-built_in">cout</span> &lt;&lt; bestSuperAnt.Path[i];        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;距离为 : &quot;</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; bestSuperAnt.length &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;&#125;;<span class="hljs-comment">// 贪心法的语句</span><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">TanXin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span>* visit, <span class="hljs-keyword">double</span> sum, <span class="hljs-keyword">int</span>* shunXv, <span class="hljs-keyword">int</span> pointNum)</span> </span>&#123;    <span class="hljs-keyword">int</span> flag = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span>) &#123;            flag = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> sum;    <span class="hljs-keyword">double</span> min = <span class="hljs-number">1000000</span>;    <span class="hljs-keyword">int</span> to;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (dis[from][i] &lt; min &amp;&amp; visit[i] == <span class="hljs-number">0</span>) &#123;            min = dis[from][i];            to = i;        &#125;    &#125;    sum += dis[from][to];    visit[to] = <span class="hljs-number">1</span>;    shunXv[pointNum++] = to;    <span class="hljs-keyword">return</span> TanXin(to, visit, sum, shunXv, pointNum);&#125;<span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">qiujv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> y1, <span class="hljs-keyword">int</span> x2, <span class="hljs-keyword">int</span> y2)</span> </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((<span class="hljs-keyword">double</span>)(x1 - x2)*(x1 - x2) + (<span class="hljs-keyword">double</span>)(y1 - y2)*(y1 - y2));&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> &#123;</span>    <span class="hljs-keyword">int</span> x;    <span class="hljs-keyword">int</span> y;&#125;;<span class="hljs-comment">// 主函数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// fanWei 代表范围</span>    <span class="hljs-comment">// chuShi 代表起始位置, 即0</span>    <span class="hljs-keyword">int</span> fanWei;    <span class="hljs-keyword">int</span> chuShi = <span class="hljs-number">0</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入范围 : &quot;</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; fanWei;    point point[NUM];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        point[i].x = random(fanWei);        point[i].y = random(fanWei);    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; NUM; j++) &#123;            dis[i][j] = qiujv(point[i].x, point[i].y, point[j].x, point[j].y);        &#125;    &#125;    <span class="hljs-keyword">double</span> min = <span class="hljs-number">100000</span>; <span class="hljs-comment">// 最小值</span>    <span class="hljs-keyword">int</span> to; <span class="hljs-comment">//要去的</span>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>; <span class="hljs-comment">//总数</span>    <span class="hljs-keyword">int</span> shunXv[NUM] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 顺序</span>    <span class="hljs-keyword">int</span> visit[NUM] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 储存访问过的点</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (dis[<span class="hljs-number">0</span>][i] &lt; min) &#123;            min = dis[<span class="hljs-number">0</span>][i];            to = i;        &#125;    &#125;    sum += dis[<span class="hljs-number">0</span>][to];    shunXv[<span class="hljs-number">1</span>] = to;    visit[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;    visit[to] = <span class="hljs-number">1</span>;    tanXindis = TanXin(to, visit, sum, shunXv, <span class="hljs-number">2</span>);    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*********** 贪心的结果 **********&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM; i++) &#123;        <span class="hljs-keyword">if</span> (i) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; shunXv[i];    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;距离为 : &quot;</span> &lt;&lt; tanXindis &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*********** 蚁群的结果 **********&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    TSP tsp;    tsp.Init();    tsp.Search();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>瞎搞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poj-2253 poj-1797 最短路变形</title>
    <link href="/2019/03/28/poj-2253-poj-1797-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%98%E5%BD%A2/"/>
    <url>/2019/03/28/poj-2253-poj-1797-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%8F%98%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="poj-2253"><a href="#poj-2253" class="headerlink" title="poj-2253"></a><a href="https://vjudge.net/contest/66569#problem/B">poj-2253</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li><p>复制一下别人的题意，有两只青蛙和若干块石头，现在已知这些东西的坐标，两只青蛙A坐标和青蛙B坐标是第一个和第二个坐标，现在A青蛙想要到B青蛙那里去，并且A青蛙可以借助任意石头的跳跃，而从A到B有若干通路，问从A到B的所有通路上的最大边</p></li><li><p>从a到b有n条路径, 寻找n条路经中边最大长度最小的</p></li><li><p>code</p></li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : 2253.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 19 18:47:31</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1&lt;&lt;28</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span> , <span class="hljs-keyword">int</span>&gt; point;point ps[<span class="hljs-number">250</span>];<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">double</span> d[<span class="hljs-number">250</span>];<span class="hljs-keyword">bool</span> used[<span class="hljs-number">250</span>];<span class="hljs-keyword">double</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">250</span>][<span class="hljs-number">250</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getdis</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;            <span class="hljs-built_in">map</span>[i][j] = INF;        &#125;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;            <span class="hljs-keyword">if</span>(i == j)&#123;                <span class="hljs-built_in">map</span>[i][j] = <span class="hljs-number">0</span>;                <span class="hljs-keyword">continue</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">double</span> dis;                dis = <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">pow</span>((<span class="hljs-keyword">double</span>)(ps[i].first - ps[j].first), <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>((<span class="hljs-keyword">double</span>)(ps[i].second - ps[j].second), <span class="hljs-number">2</span>));                <span class="hljs-built_in">map</span>[i][j] = dis;                <span class="hljs-built_in">map</span>[j][i] = dis;            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">diji</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f)</span></span>&#123;    fill(d, d + n, INF);    <span class="hljs-built_in">memset</span>(used, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(used));    d[f] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        <span class="hljs-keyword">int</span> v = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">double</span> mind = INF;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>; u &lt; n; u++)&#123;            <span class="hljs-keyword">if</span>(!used[u] &amp;&amp; (v == - <span class="hljs-number">1</span> || d[u] &lt; mind))&#123;                v = u;                mind = d[u];            &#125;        &#125;        <span class="hljs-keyword">if</span>(v == <span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;        used[v] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>; u &lt; n; u++)&#123;            <span class="hljs-comment">// 更新的是f号石头到u号石头最长边中的最小边</span>            d[u] = min(d[u], max(d[v],<span class="hljs-built_in">map</span>[v][u]));        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> kase = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n)&#123;        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">int</span> a, b;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;            ps[i].first = a;            ps[i].second = b;        &#125;        getdis();        diji(<span class="hljs-number">0</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Scenario #%d\n&quot;</span>, ++kase);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Frog Distance = %.3f&quot;</span>, d[<span class="hljs-number">1</span>]);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><ul><li><a href="https://blog.csdn.net/PKU_ZZY/article/details/52434239">关于Dijkstra成立条件的一篇博文</a></li></ul><h1 id="poj-1797"><a href="#poj-1797" class="headerlink" title="poj-1797"></a><a href="https://vjudge.net/contest/66569#problem/C">poj-1797</a></h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><ul><li><p>上一个是找所有路径中最长路径最短的, 这个是找所有路径中最短路径最长的</p></li><li><p>code</p></li></ul><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : 1797.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 19 20:58:42</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1&lt;&lt;28</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MINF -1</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">1050</span>][<span class="hljs-number">1050</span>];<span class="hljs-keyword">int</span> book[<span class="hljs-number">1050</span>];<span class="hljs-keyword">int</span> n, k;<span class="hljs-keyword">int</span> d[<span class="hljs-number">1050</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">diji</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        d[i] = <span class="hljs-built_in">map</span>[<span class="hljs-number">0</span>][i];        book[i] = <span class="hljs-number">0</span>;    &#125;    d[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;        <span class="hljs-keyword">int</span> maxd = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">int</span> t;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;            <span class="hljs-keyword">if</span>(!book[j] &amp;&amp; d[j] &gt; maxd)&#123;                maxd = d[j];                t = j;            &#125;        &#125;        book[t] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)&#123;            <span class="hljs-keyword">if</span>(!book[j] &amp;&amp; d[j] &lt; min(d[t], <span class="hljs-built_in">map</span>[t][j]))&#123;                d[j] = min(d[t], <span class="hljs-built_in">map</span>[t][j]);            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> kase = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> num;    <span class="hljs-built_in">cin</span> &gt;&gt; num;    <span class="hljs-keyword">while</span>(num--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;        <span class="hljs-keyword">int</span> a, b, c;        <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">map</span>, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">map</span>));        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;            <span class="hljs-built_in">map</span>[a - <span class="hljs-number">1</span>][b - <span class="hljs-number">1</span>] = c;            <span class="hljs-built_in">map</span>[b - <span class="hljs-number">1</span>][a - <span class="hljs-number">1</span>] = c;        &#125;        diji();        <span class="hljs-comment">/*</span><span class="hljs-comment">        for(int i = 0; i &lt; n; i++)&#123;</span><span class="hljs-comment">            cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;;</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">        */</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Scenario #%d:\n&quot;</span>, ++kase);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n\n&quot;</span>, d[n - <span class="hljs-number">1</span>]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>poj-2384 简单最短路问题</title>
    <link href="/2019/03/28/poj-2384-%E7%AE%80%E5%8D%95%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    <url>/2019/03/28/poj-2384-%E7%AE%80%E5%8D%95%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="link"><a href="#link" class="headerlink" title="link"></a><a href="https://vjudge.net/contest/66569#problem/A">link</a></h1><h2 id="Dijkstra无优化版本-AC"><a href="#Dijkstra无优化版本-AC" class="headerlink" title="Dijkstra无优化版本 (AC)"></a>Dijkstra无优化版本 (AC)</h2><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : 2384.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 18 19:01:57</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-comment">// 邻接矩阵表示 141ms</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1&lt;&lt;28</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">1050</span>][<span class="hljs-number">1050</span>];<span class="hljs-keyword">int</span> t, n;<span class="hljs-keyword">int</span> d[<span class="hljs-number">1050</span>];<span class="hljs-keyword">bool</span> used[<span class="hljs-number">1050</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bell</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f)</span></span>&#123;    fill(d, d + n + <span class="hljs-number">1</span>, INF);    <span class="hljs-built_in">memset</span>(used, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(used));    d[f] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;        <span class="hljs-keyword">int</span> v = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>;  u &lt; n + <span class="hljs-number">1</span>; u++)&#123;            <span class="hljs-keyword">if</span> (!used[u] &amp;&amp; (v == <span class="hljs-number">-1</span> || d[u] &lt; d[v])) v = u;        &#125;        <span class="hljs-keyword">if</span>(v == <span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;        used[v] = <span class="hljs-literal">true</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt; n + <span class="hljs-number">1</span>; u++)&#123;            d[u] = min(d[u], d[v] + <span class="hljs-built_in">map</span>[v][u]);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; t &gt;&gt; n)&#123;        <span class="hljs-keyword">int</span> a, b, c;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n + <span class="hljs-number">1</span>; i++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n + <span class="hljs-number">1</span>; j++) &#123;                <span class="hljs-built_in">map</span>[i][j] = INF;            &#125;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;            <span class="hljs-keyword">if</span>(c &lt; <span class="hljs-built_in">map</span>[a][b])&#123;                <span class="hljs-built_in">map</span>[a][b] = c;                <span class="hljs-built_in">map</span>[b][a] = c;            &#125;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n + <span class="hljs-number">1</span>; i++)&#123;            <span class="hljs-built_in">map</span>[i][i] = <span class="hljs-number">0</span>;        &#125;        bell(<span class="hljs-number">1</span>);        <span class="hljs-built_in">cout</span> &lt;&lt; d[n] &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="Dijkstra-邻接表-堆优化-AC"><a href="#Dijkstra-邻接表-堆优化-AC" class="headerlink" title="Dijkstra 邻接表 + 堆优化 (AC)"></a>Dijkstra 邻接表 + 堆优化 (AC)</h2><pre><code class="hljs cpp"><span class="hljs-comment">/**********************************************************</span><span class="hljs-comment">    &gt; File Name : 2384.cpp</span><span class="hljs-comment">    &gt; Author : Wqr_</span><span class="hljs-comment">    &gt; Mail : xueduanwei@126.com</span><span class="hljs-comment">    &gt; Created Time : 19 03 18 19:01:57</span><span class="hljs-comment">**********************************************************/</span><span class="hljs-comment">// 邻接表表示+堆优化 141ms</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1&lt;&lt;28</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">road</span>&#123;</span><span class="hljs-keyword">int</span> to, cost; &#125;;<span class="hljs-comment">// first为最短距离, second为编号</span><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; P;<span class="hljs-keyword">int</span> n, t;<span class="hljs-built_in">vector</span>&lt;road&gt; G[<span class="hljs-number">1010</span>];<span class="hljs-keyword">int</span> d[<span class="hljs-number">1010</span>];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f)</span></span>&#123;    <span class="hljs-comment">//优先队列 首先按照pair.first进行排序, first相同时按照second进行排序</span>    <span class="hljs-built_in">priority_queue</span>&lt;P, <span class="hljs-built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; q;    fill(d, d + n + <span class="hljs-number">1</span>, INF);    d[f] = <span class="hljs-number">0</span>;    q.push(P(<span class="hljs-number">0</span>, f));    <span class="hljs-keyword">while</span> (!q.empty()) &#123;        <span class="hljs-comment">//每次选择出距离f最近的点为v</span>        P p = q.top();        q.pop();        <span class="hljs-keyword">int</span> v = p.second;        <span class="hljs-keyword">if</span>(d[v] &lt; p.first) <span class="hljs-keyword">continue</span>;        <span class="hljs-comment">// 以v为跳板更新其他边的最小距离</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[v].size(); i++)&#123;            road e = G[v][i];            <span class="hljs-keyword">if</span>(d[e.to] &gt; d[v] + e.cost)&#123;                d[e.to] = d[v] + e.cost;                q.push(P(d[e.to], e.to));            &#125;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; t &gt;&gt; n) &#123;        <span class="hljs-keyword">int</span> a, b, c;        <span class="hljs-comment">// 邻接表的输入</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i++) &#123;            <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;            road tmp;            tmp.to = b;            tmp.cost = c;            <span class="hljs-comment">//将各个边push进G[a]</span>            G[a].push_back(tmp);            tmp.to = a;            tmp.cost = c;            <span class="hljs-comment">//将各个边push进G[b]</span>            G[b].push_back(tmp);        &#125;        dij(<span class="hljs-number">1</span>);        <span class="hljs-built_in">cout</span> &lt;&lt; d[n] &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
